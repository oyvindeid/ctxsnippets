;;; Compiled snippets and support files for `context-mode'
;;; Snippet definitions:
;;;
(yas-define-snippets 'context-mode
                     '(("actbib" "%%%%% BIBLIOGRAPHY ACTIVATION %%%%%%%%%%%%%%%%%%%\n%% BibTeX file: ${1:$$(if (boundp 'user-default-bibtex-file) (progn (insert (symbol-value 'user-default-bibtex-file))(yas-text))(if (> (length (directory-files (expand-file-name (file-name-directory buffer-file-name)) nil \"^[^.]*\\\\.bib$\")) 0)(yas-choose-value (directory-files (expand-file-name (file-name-directory buffer-file-name)) nil \"^[^.]*\\\\.bib$\"))(yas-text)))}\n%% Style: ${2:$$(yas/choose-value '(\"apa\" \"aps\"))}\n\\definebtxdataset[default]\n\\defineregister[indexofauthors]\n\\definebtxregister\n  [authors] \n  [field=author,register=indexofauthors,method=always,\n   dataset=default,alternative=invertedshort]\n\\usebtxdataset[$1]\n\\usebtxdefinitions[$2]\n%%%%% END OF ACTIVATION %%%%%%%%%%%%%%%%%%%%%%%%%\n$0" "Activate bibliography" nil
                        ("Bibliography")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/a_Bibliography/j_activate_bibliography.yasnippet" nil nil)
                       ("ckey" "${1:$$(if (boundp 'user-default-bibtex-file)(yas/choose-value (with-temp-buffer (insert-file-contents (symbol-value 'user-default-bibtex-file))(split-string (replace-regexp-in-string \"[,]$\" \"\" (replace-regexp-in-string \"^[\\s]*[@]+[a-zA-Z0-9]+[{]\" \"\" (replace-regexp-in-string \"^[\\s]*[^@]+$\" \"\" (buffer-string))) \"\\n\" t))))(insert \"key\")(yas-text))}$0" "BIBKEY" nil
                        ("Bibliography")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/a_Bibliography/i_bibkey.yasnippet" nil nil)
                       ("ctitle" "\\cite[title][${1:$$(if (boundp 'user-default-bibtex-file)(yas/choose-value (with-temp-buffer (insert-file-contents (symbol-value 'user-default-bibtex-file))(split-string (replace-regexp-in-string \"[,]$\" \"\" (replace-regexp-in-string \"^[\\s]*[@]+[a-zA-Z0-9]+[{]\" \"\" (replace-regexp-in-string \"^[\\s]*[^@]+$\" \"\" (buffer-string))) \"\\n\" t))))(insert \"key\")(yas-text))}$0]" "Title of a publication" nil
                        ("Bibliography")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/a_Bibliography/h_title.yasnippet" nil nil)
                       ("cnum" "\\cite[num][${1:$$(if (boundp 'user-default-bibtex-file)(yas/choose-value (with-temp-buffer (insert-file-contents (symbol-value 'user-default-bibtex-file))(split-string (replace-regexp-in-string \"[,]$\" \"\" (replace-regexp-in-string \"^[\\s]*[@]+[a-zA-Z0-9]+[{]\" \"\" (replace-regexp-in-string \"^[\\s]*[^@]+$\" \"\" (buffer-string))) \"\\n\" t))))(insert \"key\")(yas-text))}$0]" "[Number]" nil
                        ("Bibliography")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/a_Bibliography/g_number.yasnippet" nil nil)
                       ("cyear" "\\cite[year][${1:$$(if (boundp 'user-default-bibtex-file)(yas/choose-value (with-temp-buffer (insert-file-contents (symbol-value 'user-default-bibtex-file))(split-string (replace-regexp-in-string \"[,]$\" \"\" (replace-regexp-in-string \"^[\\s]*[@]+[a-zA-Z0-9]+[{]\" \"\" (replace-regexp-in-string \"^[\\s]*[^@]+$\" \"\" (buffer-string))) \"\\n\" t))))(insert \"key\")(yas-text))}$0]" "Year" nil
                        ("Bibliography")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/a_Bibliography/f_year.yasnippet" nil nil)
                       ("cauth" "\\cite[author][${1:$$(if (boundp 'user-default-bibtex-file)(yas/choose-value (with-temp-buffer (insert-file-contents (symbol-value 'user-default-bibtex-file))(split-string (replace-regexp-in-string \"[,]$\" \"\" (replace-regexp-in-string \"^[\\s]*[@]+[a-zA-Z0-9]+[{]\" \"\" (replace-regexp-in-string \"^[\\s]*[^@]+$\" \"\" (buffer-string))) \"\\n\" t))))(insert \"key\")(yas-text))}$0]" "Author" nil
                        ("Bibliography")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/a_Bibliography/e_author.yasnippet" nil nil)
                       ("cshort" "\\cite[short][${1:$$(if (boundp 'user-default-bibtex-file)(yas/choose-value (with-temp-buffer (insert-file-contents (symbol-value 'user-default-bibtex-file))(split-string (replace-regexp-in-string \"[,]$\" \"\" (replace-regexp-in-string \"^[\\s]*[@]+[a-zA-Z0-9]+[{]\" \"\" (replace-regexp-in-string \"^[\\s]*[^@]+$\" \"\" (buffer-string))) \"\\n\" t))))(insert \"key\")(yas-text))}$0]" "[AU+YY]" nil
                        ("Bibliography")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/a_Bibliography/d_authoryear_short.yasnippet" nil nil)
                       ("citean" "\\cite[authornum][${1:$$(if (boundp 'user-default-bibtex-file)(yas/choose-value (with-temp-buffer (insert-file-contents (symbol-value 'user-default-bibtex-file))(split-string (replace-regexp-in-string \"[,]$\" \"\" (replace-regexp-in-string \"^[\\s]*[@]+[a-zA-Z0-9]+[{]\" \"\" (replace-regexp-in-string \"^[\\s]*[^@]+$\" \"\" (buffer-string))) \"\\n\" t))))(insert \"key\")(yas-text))}$0]" "(Author, number)" nil
                        ("Bibliography")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/a_Bibliography/c_authornum.yasnippet" nil nil)
                       ("cays" "\\cite[authoryears][${1:$$(if (boundp 'user-default-bibtex-file)(yas/choose-value (with-temp-buffer (insert-file-contents (symbol-value 'user-default-bibtex-file))(split-string (replace-regexp-in-string \"[,]$\" \"\" (replace-regexp-in-string \"^[\\s]*[@]+[a-zA-Z0-9]+[{]\" \"\" (replace-regexp-in-string \"^[\\s]*[^@]+$\" \"\" (buffer-string))) \"\\n\" t))))(insert \"key\")(yas-text))}$0]" "Author (year)" nil
                        ("Bibliography")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/a_Bibliography/b_author_year.yasnippet" nil nil)
                       ("cay" "\\cite[authoryear][${1:$$(if (boundp 'user-default-bibtex-file)(yas/choose-value (with-temp-buffer (insert-file-contents (symbol-value 'user-default-bibtex-file))(split-string (replace-regexp-in-string \"[,]$\" \"\" (replace-regexp-in-string \"^[\\s]*[@]+[a-zA-Z0-9]+[{]\" \"\" (replace-regexp-in-string \"^[\\s]*[^@]+$\" \"\" (buffer-string))) \"\\n\" t))))(insert \"key\")(yas-text))}$0]" "(Author, year)" nil
                        ("Bibliography")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/a_Bibliography/a_authoryear.yasnippet" nil nil)))


;;; Snippet definitions:
;;;
(yas-define-snippets 'context-mode
                     '(("ftext" "\\input ${1:$$(yas/choose-value '(\"aesop-de\" \"bryson\" \"cervantes-es\" \"davis\" \"dawkins\"\n                                 \"douglas\" \"hawking\" \"knuth\" \"linden\" \"lorem\" \"materie\"\n                                 \"montgomery\" \"quevedo-es\" \"reich\" \"samples\" \"thuan\"\n                                 \"ward\" \"weisman\" \"zapf\"))} $0" "Select filler text" nil
                        ("Filler Text")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/b_Filler_Text/u_select_filler_text.yasnippet" nil nil)
                       ("zapf" "\\input zapf $0" "Zapf: english text, one paragraph, 98 words" nil
                        ("Filler Text")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/b_Filler_Text/t_zapf.yasnippet" nil nil)
                       ("weisman" "\\input weisman $0" "Weisman: english text, one paragraph, 53 words" nil
                        ("Filler Text")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/b_Filler_Text/s_weisman.yasnippet" nil nil)
                       ("ward" "\\input ward $0" "Ward: english text, one paragraph, 57 words" nil
                        ("Filler Text")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/b_Filler_Text/r_ward.yasnippet" nil nil)
                       ("tufte" "\\input tufte $0" "Tufte: english text, one paragraph, 91 words" nil
                        ("Filler Text")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/b_Filler_Text/q_thufte.yasnippet" nil nil)
                       ("thuan" "\\input thuan $0" "Thuan: english text, one paragraph, 98 words" nil
                        ("Filler Text")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/b_Filler_Text/p_thuan.yasnippet" nil nil)
                       ("samples" "\\input samples $0" "Samples: english text showing available filler texts" nil
                        ("Filler Text")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/b_Filler_Text/o_samples.yasnippet" nil nil)
                       ("reich" "\\input reich $0" "Reich: english text, three lines of quotation, 43 words" nil
                        ("Filler Text")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/b_Filler_Text/n_reich.yasnippet" nil nil)
                       ("quevedo" "\\input quevedo-es $0" "Quevedo: spanish poem, four paragraphs, 103 words" nil
                        ("Filler Text")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/b_Filler_Text/m_quevedo.yasnippet" nil nil)
                       ("mgomery" "\\input montgomery $0" "Montgomery: english text, one paragraph, 140 words" nil
                        ("Filler Text")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/b_Filler_Text/l_montgomery.yasnippet" nil nil)
                       ("materie" "\\input materie $0" "Materie: old dutch text, one paragraph, 72 words" nil
                        ("Filler Text")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/b_Filler_Text/k_materie.yasnippet" nil nil)
                       ("lorem" "\\input lorem $0" "Lorem: latin text, one paragraph, 122 words" nil
                        ("Filler Text")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/b_Filler_Text/j_lorem.yasnippet" nil nil)
                       ("linden" "\\input linden $0" "Linden: english text, one paragraph, 95 words" nil
                        ("Filler Text")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/b_Filler_Text/i_linden.yasnippet" nil nil)
                       ("knuth" "\\input knuth $0" "Knuth: english text, three paragraphs, 117 words" nil
                        ("Filler Text")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/b_Filler_Text/h_knuth.yasnippet" nil nil)
                       ("hawking" "\\input hawking $0" "Hawking: english text, one paragraph, 81 words" nil
                        ("Filler Text")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/b_Filler_Text/g_hawking.yasnippet" nil nil)
                       ("douglas" "\\input douglas $0" "Douglas: english text, two paragraphs, 204 words" nil
                        ("Filler Text")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/b_Filler_Text/f_douglas.yasnippet" nil nil)
                       ("dawkins" "\\input dawkins $0" "Dawkins: english text, one paragraph, 192 words" nil
                        ("Filler Text")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/b_Filler_Text/e_dawkins.yasnippet" nil nil)
                       ("davis" "\\input davis $0" "Davis: english text, one paragraph, 133 words" nil
                        ("Filler Text")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/b_Filler_Text/d_davis.yasnippet" nil nil)
                       ("cervantes" "\\input cervantes-es $0" "Cervantes: spanish text, one paragraph, 66 words" nil
                        ("Filler Text")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/b_Filler_Text/c_cervantes.yasnippet" nil nil)
                       ("bryson" "\\input bryson $0" "Bryson: english text, one paragraph, 111 words" nil
                        ("Filler Text")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/b_Filler_Text/b_bryson.yasnippet" nil nil)
                       ("aesop" "\\input aesop-de $0" "Aesop: german text, two paragraphs, 178 words" nil
                        ("Filler Text")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/b_Filler_Text/a_aesop.yasnippet" nil nil)))


;;; Snippet definitions:
;;;
(yas-define-snippets 'context-mode
                     '((nil "\\footnote{`(replace-regexp-in-string \"~\" \"\\\\\\\\textasciitilde \"\n(replace-regexp-in-string \"#\" \"\\\\\\\\#\"\n(replace-regexp-in-string \"&\" \"\\\\\\\\&\"\n(replace-regexp-in-string \"|\" \"\\\\\\\\textbar \"\n(replace-regexp-in-string \"%\" \"\\\\\\\\percent \"\n(replace-regexp-in-string \"\\\\(%\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\percent\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(|\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textbar\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(~\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textasciitilde\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([\\$]\\\\)\\\\([[:nonascii:]A-Za-z0-9]+\\\\)\" \"\\\\\\\\textdollar \"\n(replace-regexp-in-string \"\\\\([^a-zA-Z#&|]\\\\)\\\\([\\\\]+\\\\)\\\\([^a-zA-Z#&|]\\\\)\" \"\\\\\\\\letterbackslash\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quotation{\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([»\\\"“„”]\\\\)\" \"}\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quote{\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹\\'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([›\\'‘‚’]\\\\)\" \"}\"\n(yas-selected-text) nil nil 4) nil nil 2) nil nil 3) nil nil 1) nil nil 2) nil nil 1) nil nil 1) nil nil 1) nil nil 1 ))))))`}$0" "Region as footnote" nil
                            ("Footnotes")
                            ((yas/indent-line 'fixed)
                             (yas/wrap-around-region 'nil))
                            "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/c_Footnotes/e_region_as_footnote.yasnippet" "C-c f n" nil)
                       ("setfn" "%%%%% FOOTNOTES CONFIGURATION %%%%%%%%%%%%%%%%%%%\n%% Location: ${1:$$(yas/choose-value '(\"Footnotes at the bottom of a page\" \"Footnotes in a single column\" \"Footnotes at the end of each chapter\" \"Footnotes in the text\"))}\n%% Footnote symbols: ${2:$$(yas/choose-value '(\"numbers\" \"characters\" \"Characters\" \"romannumerals\" \"Romannumerals\" \"set 2\"))}\n\\setupinteraction[state=start]%\n${1:$(cond \n((string-equal \"Footnotes at the bottom of a page\" yas-text)\n(concat \"\\\\\\setupnote[footnote][location=page]\\n\\\\\\setupnotation[footnote][way=bytext,bodyfont=small,n=2,\"))\n((string-equal \"Footnotes in a single column\" yas-text)\n(concat \"\\\\\\setupnote[footnote][location=column]\\n\\\\\\setupnotation[footnote][way=bytext,bodyfont=small,n=1,\"))\n((string-equal \"Footnotes in the text\" yas-text) \n(concat \"\\\\\\setupnote[footnote][location=text]\\n\\\\\\setupnotation[footnote][way=bytext,bodyfont=small,\"))\n((string-equal \"Footnotes at the end of each chapter\" yas-text)\n(concat \"\\\\\\definehead[chapterfootnotes][subject][incrementnumber=list]\\n\\\\\\startsetups[chapter:after]\\n\\s\\s\\\\\\definehead[footnoteshead][subject]\\n\\s\\s\\\\\\ifcase\\\\\\rawcountervalue[footnote]\\\\\\relax\\n\\s\\s\\\\\\or\\n\\s\\s\\s\\s\\\\\\page\\n\\s\\s\\s\\s\\\\\\startchapterfootnotes[title=\\\\\\doiftextelse{\\\\\\headtext{footnote}}{\\\\\\headtext{footnote}}{Footnote}]\\n\\s\\s\\s\\s\\s\\s\\\\\\setupinterlinespace[line=3.3ex]\\n\\s\\s\\s\\s\\s\\s\\\\\\placefootnotes\\n\\s\\s\\s\\s\\\\\\stopchapterfootnotes\\n\\s\\s\\\\\\else\\n\\s\\s\\s\\s\\\\\\page\\n\\s\\s\\s\\s\\\\\\startchapterfootnotes[title=\\\\\\doiftextelse{\\\\\\headtext{footnotes}}{\\\\\\headtext{footnotes}}{Footnotes}]\\n\\s\\s\\s\\s\\s\\s\\\\\\setupinterlinespace[line=3.3ex]\\n\\s\\s\\s\\s\\s\\s\\\\\\placefootnotes\\n\\s\\s\\s\\s\\\\\\stopchapterfootnotes\\n\\s\\s\\\\\\fi\\n\\\\\\stopsetups\\n\\\\\\setuphead[chapter][aftersection=\\\\\\setups{chapter:after}]\\n\\\\\\setupnote[footnote][location=none]\\n\\\\\\setupnotation\\n\\s\\s\\s\\s\\s\\s[footnote]\\n\\s\\s\\s\\s\\s\\s[way=bychapter,bodyfont=small,alternative=left,hang=1,n=1,\\n\\s\\s\\s\\s\\s\\s\\snumbercommand={\\\\\\tfx},width=0.75em,\")))}numberconversion={$2}]\n%%%%% END OF CONFIGURATION %%%%%%%%%%%%%%%%%%%%%% $0" "Setup footnotes" nil
                        ("Footnotes")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/c_Footnotes/d_setup_footnotes.yasnippet" nil nil)
                       ("ifn" "\\placefootnotes $0" "Insert footnotes" nil
                        ("Footnotes")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/c_Footnotes/c_insert_footnotes.yasnippet" nil nil)
                       ("yfn" "\\footnote{`(replace-regexp-in-string \"~\" \"\\\\\\\\textasciitilde \"\n(replace-regexp-in-string \"#\" \"\\\\\\\\#\"\n(replace-regexp-in-string \"&\" \"\\\\\\\\&\"\n(replace-regexp-in-string \"|\" \"\\\\\\\\textbar \"\n(replace-regexp-in-string \"%\" \"\\\\\\\\percent \"\n(replace-regexp-in-string \"\\\\(%\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\percent\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(|\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textbar\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(~\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textasciitilde\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([\\$]\\\\)\\\\([[:nonascii:]A-Za-z0-9]+\\\\)\" \"\\\\\\\\textdollar \"\n(replace-regexp-in-string \"\\\\([^a-zA-Z#&|]\\\\)\\\\([\\\\]+\\\\)\\\\([^a-zA-Z#&|]\\\\)\" \"\\\\\\\\letterbackslash\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quotation{\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([»\\\"“„”]\\\\)\" \"}\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quote{\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹\\'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([›\\'‘‚’]\\\\)\" \"}\"\n(current-kill 0) nil nil 4) nil nil 2) nil nil 3) nil nil 1) nil nil 2) nil nil 1) nil nil 1) nil nil 1) nil nil 1 ))))))`}$0" "Yank as footnote" nil
                        ("Footnotes")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/c_Footnotes/b_yank_as_footnote.yasnippet" nil nil)
                       ("fn" "\\footnote{${1:TEXT}}$0" "Footnote" nil
                        ("Footnotes")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/c_Footnotes/a_footnote.yasnippet" nil nil)))


;;; Snippet definitions:
;;;
(yas-define-snippets 'context-mode
                     '((nil "\\\\${1:$$(yas/choose-value '(\"margintext\" \"inleft\" \"inright\"))}{`(replace-regexp-in-string \"~\" \"\\\\\\\\textasciitilde \"\n(replace-regexp-in-string \"#\" \"\\\\\\\\#\"\n(replace-regexp-in-string \"&\" \"\\\\\\\\&\"\n(replace-regexp-in-string \"|\" \"\\\\\\\\textbar \"\n(replace-regexp-in-string \"%\" \"\\\\\\\\percent \"\n(replace-regexp-in-string \"\\\\(%\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\percent\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(|\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textbar\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(~\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textasciitilde\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([\\$]\\\\)\\\\([[:nonascii:]A-Za-z0-9]+\\\\)\" \"\\\\\\\\textdollar \"\n(replace-regexp-in-string \"\\\\([^a-zA-Z#&|]\\\\)\\\\([\\\\]+\\\\)\\\\([^a-zA-Z#&|]\\\\)\" \"\\\\\\\\letterbackslash\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quotation{\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([»\\\"“„”]\\\\)\" \"}\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quote{\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹\\'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([›\\'‘‚’]\\\\)\" \"}\"\n(yas-selected-text) nil nil 4) nil nil 2) nil nil 3) nil nil 1) nil nil 2) nil nil 1) nil nil 1) nil nil 1) nil nil 1 ))))))`}$0" "Region as margin text" nil
                            ("Margin Text")
                            ((yas/indent-line 'fixed)
                             (yas/wrap-around-region 'nil))
                            "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/d_Margin_Text/d_region_as_margin_text.yasnippet" "C-c m t" nil)
                       ("setmt" "%%%%% MARGIN TEXTS CONFIGURATION %%%%%%%%%%%%%\n%% Font Style: ${1:$$(yas/choose-value '(\"No style\" \"Serif\" \"Sans serif\" \"Teletype\"))}\n%% Font Size: ${2:$$(yas/choose-value '(\"xx - text scaled at 0.6\" \"x - text scaled at 0.8\" \"typeface - text scaled at 1\" \"a - text scaled at 1.2\" \"b - text scaled at 1.44\" \"c - text scaled at 1.72\" \"d - text scaled at 2.07\"))}\n%% Font Alternative: ${3:$$(yas/choose-value '(\"Normal\" \"Bold\" \"Italic\" \"Slanted\" \"Bold Italic\" \"Bold Slanted\" \"Smallcaps\"))}\n%% Text Color: ${4:$$(yas/choose-value '(\"black\" \"blue\" \"cyan\" \"darkblue\" \"darkcyan\" \"darkgray\" \"darkgreen\" \"darkmagenta\" \"darkred\" \"darkyellow\" \"gray\" \"green\" \"lightblue\" \"lightgray\" \"lightgreen\" \"lightred\" \"magenta\" \"middleblue\" \"middlecyan\" \"middlegray\" \"middlegreen\" \"middlemagenta\" \"middlered\" \"middleyellow\" \"orange\" \"red\" \"white\" \"yellow\"))}\n\\definemargindata\n  [margintext]\n  [style={\\\\${1:$(cond ((string-equal \"No style\" yas-text) (concat \"tf\"))((string-equal \"Serif\" yas-text) (concat \"rm\"))((string-equal \"Sans serif\" yas-text) (concat \"ss\"))((string-equal \"Teletype\" yas-text) (concat \"tt\")))}${2:$(cond ((string-equal \"xx - text scaled at 0.6\" yas-text) (concat \"xx\"))((string-equal \"x - text scaled at 0.8\" yas-text) (concat \"x\"))((string-equal \"a - text scaled at 1.2\" yas-text) (concat \"a\"))((string-equal \"b - text scaled at 1.44\" yas-text) (concat \"b\"))((string-equal \"c - text scaled at 1.72\" yas-text) (concat \"c\"))((string-equal \"d - text scaled at 2.07\" yas-text) (concat \"d\")))}${3:$(cond ((string-equal \"Bold\" yas-text) (concat \"\\\\\\bf\"))((string-equal \"Italic\" yas-text) (concat \"\\\\\\it\"))((string-equal \"Slanted\" yas-text) (concat \"\\\\\\sl\"))((string-equal \"Bold Italic\" yas-text) (concat \"\\\\\\bi\"))((string-equal \"Bold Slanted\" yas-text) (concat \"\\\\\\bs\"))((string-equal \"Smallcaps\" yas-text) (concat \"\\\\\\sc\")))}},color=$4,stack=yes]\n\\definemargindata\n  [inleft]\n  [location=left,style={\\\\${1:$(cond ((string-equal \"No style\" yas-text) (concat \"tf\"))((string-equal \"Serif\" yas-text) (concat \"rm\"))((string-equal \"Sans serif\" yas-text) (concat \"ss\"))((string-equal \"Teletype\" yas-text) (concat \"tt\")))}${2:$(cond ((string-equal \"xx - text scaled at 0.6\" yas-text) (concat \"xx\"))((string-equal \"x - text scaled at 0.8\" yas-text) (concat \"x\"))((string-equal \"a - text scaled at 1.2\" yas-text) (concat \"a\"))((string-equal \"b - text scaled at 1.44\" yas-text) (concat \"b\"))((string-equal \"c - text scaled at 1.72\" yas-text) (concat \"c\"))((string-equal \"d - text scaled at 2.07\" yas-text) (concat \"d\")))}${3:$(cond ((string-equal \"Bold\" yas-text) (concat \"\\\\\\bf\"))((string-equal \"Italic\" yas-text) (concat \"\\\\\\it\"))((string-equal \"Slanted\" yas-text) (concat \"\\\\\\sl\"))((string-equal \"Bold Italic\" yas-text) (concat \"\\\\\\bi\"))((string-equal \"Bold Slanted\" yas-text) (concat \"\\\\\\bs\"))((string-equal \"Smallcaps\" yas-text) (concat \"\\\\\\sc\")))}},color=$4,stack=yes]\n\\definemargindata\n  [inright]\n  [location=right,style={\\\\${1:$(cond ((string-equal \"No style\" yas-text) (concat \"tf\"))((string-equal \"Serif\" yas-text) (concat \"rm\"))((string-equal \"Sans serif\" yas-text) (concat \"ss\"))((string-equal \"Teletype\" yas-text) (concat \"tt\")))}${2:$(cond ((string-equal \"xx - text scaled at 0.6\" yas-text) (concat \"xx\"))((string-equal \"x - text scaled at 0.8\" yas-text) (concat \"x\"))((string-equal \"a - text scaled at 1.2\" yas-text) (concat \"a\"))((string-equal \"b - text scaled at 1.44\" yas-text) (concat \"b\"))((string-equal \"c - text scaled at 1.72\" yas-text) (concat \"c\"))((string-equal \"d - text scaled at 2.07\" yas-text) (concat \"d\")))}${3:$(cond ((string-equal \"Bold\" yas-text) (concat \"\\\\\\bf\"))((string-equal \"Italic\" yas-text) (concat \"\\\\\\it\"))((string-equal \"Slanted\" yas-text) (concat \"\\\\\\sl\"))((string-equal \"Bold Italic\" yas-text) (concat \"\\\\\\bi\"))((string-equal \"Bold Slanted\" yas-text) (concat \"\\\\\\bs\"))((string-equal \"Smallcaps\" yas-text) (concat \"\\\\\\sc\")))}},color=$4,stack=yes]\n%%%%% END OF MARGIN TEXTS CONFIGURATION %%%%%% $0" "Setup margin texts" nil
                        ("Margin Text")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/d_Margin_Text/c_setup_margin_texts.yasnippet" nil nil)
                       ("ymt" "\\\\${1:$$(yas/choose-value '(\"margintext\" \"inleft\" \"inright\"))}{`(replace-regexp-in-string \"~\" \"\\\\\\\\textasciitilde \"\n(replace-regexp-in-string \"#\" \"\\\\\\\\#\"\n(replace-regexp-in-string \"&\" \"\\\\\\\\&\"\n(replace-regexp-in-string \"|\" \"\\\\\\\\textbar \"\n(replace-regexp-in-string \"%\" \"\\\\\\\\percent \"\n(replace-regexp-in-string \"\\\\(%\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\percent\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(|\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textbar\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(~\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textasciitilde\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([\\$]\\\\)\\\\([[:nonascii:]A-Za-z0-9]+\\\\)\" \"\\\\\\\\textdollar \"\n(replace-regexp-in-string \"\\\\([^a-zA-Z#&|]\\\\)\\\\([\\\\]+\\\\)\\\\([^a-zA-Z#&|]\\\\)\" \"\\\\\\\\letterbackslash\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quotation{\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([»\\\"“„”]\\\\)\" \"}\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quote{\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹\\'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([›\\'‘‚’]\\\\)\" \"}\"\n(current-kill 0) nil nil 4) nil nil 2) nil nil 3) nil nil 1) nil nil 2) nil nil 1) nil nil 1) nil nil 1) nil nil 1 ))))))`}$0" "Yank as margin text" nil
                        ("Margin Text")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/d_Margin_Text/b_yank_as_margin_text.yasnippet" nil nil)
                       ("mt" "\\\\${1:$$(yas/choose-value '(\"margintext\" \"inleft\" \"inright\"))}{${2: }}$0" "Margin text" nil
                        ("Margin Text")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/d_Margin_Text/a_margin_text.yasnippet" nil nil)))


;;; Snippet definitions:
;;;
(yas-define-snippets 'context-mode
                     '((nil "\\startitemize[continue]\n`(replace-regexp-in-string \"^[[:blank:]]+\" \"\\s\\s\"\n(replace-regexp-in-string \"\\\\\\\\startitem[[:blank:]]+\\\\\\\\stopitem\\n\" \"\"\n(replace-regexp-in-string \"[\\\\]+\" \"\\\\\\\\\"\n(replace-regexp-in-string \"~\" \"\\\\\\\\textasciitilde \"\n(replace-regexp-in-string \"#\" \"\\\\\\\\#\"\n(replace-regexp-in-string \"&\" \"\\\\\\\\&\"\n(replace-regexp-in-string \"|\" \"\\\\\\\\textbar \"\n(replace-regexp-in-string \"%\" \"\\\\\\\\percent \"\n(replace-regexp-in-string \"\\\\(%\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\percent\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(|\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textbar\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(~\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textasciitilde\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([\\$]\\\\)\\\\([[:nonascii:]A-Za-z0-9]+\\\\)\" \"\\\\\\\\textdollar \"\n(replace-regexp-in-string \"\\\\([^a-zA-Z#&|]\\\\)\\\\([\\\\]+\\\\)\\\\([^a-zA-Z#&|]\\\\)\" \"\\\\\\\\letterbackslash\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quotation{\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([»\\\"“„”]\\\\)\" \"}\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quote{\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹\\'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([›\\'‘‚’]\\\\)\" \"}\"\n(replace-regexp-in-string \"$\" \" \\\\\\\\stopitem\"\n(replace-regexp-in-string \"^\" \"\\s\\s\\\\\\\\startitem \"\n(yas-selected-text) t) t) nil nil 4) nil nil 2) nil nil 3) nil nil 1) nil nil 2) nil nil 1) nil nil 1) nil nil 1) nil nil 1)))))))))`\n\\stopitemize\n$0" "Lines in region as continued list [sep: \\n+]" nil
                            ("Enumerations")
                            ((yas/indent-line 'fixed)
                             (yas/wrap-around-region 'nil))
                            "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/e_Enumerations/d_lines_in_region_as_continued_list.yasnippet" "C-c c l s" nil)
                       (nil "\\startitemize[${1:$$(yas/choose-value '(\"n\" \"a\" \"A\" \"KA\" \"r\" \"R\" \"KR\" \"g\" \"m\" \"1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\"))},${2:$$(yas/choose-value '(\"standard\" \"packed\" \"paragraph\" \"serried\" \"2*serried\" \"3*serried\" \"4*serried\" \"broad\" \"2*broad\" \"3*broad\" \"4*broad\" \"standard, columns\" \"packed, columns\" \"paragraph, columns\" \"serried, columns\" \"2*serried, columns\" \"3*serried, columns\" \"4*serried, columns\" \"broad, columns\" \"2*broad, columns\" \"3*broad, columns\" \"4*broad, columns\" \"standard, columns, three\" \"packed, columns, three\" \"paragraph, columns, three\" \"serried, columns, three\" \"2*serried, columns, three\" \"3*serried, columns, three\" \"4*serried, columns, three\" \"broad, columns, three\" \"2*broad, columns, three\" \"3*broad, columns, three\" \"4*broad, columns, three\" \"standard, columns, four\" \"packed, columns, four\" \"paragraph, columns, four\" \"serried, columns, four\" \"2*serried, columns, four\" \"3*serried, columns, four\" \"4*serried, columns, four\" \"broad, columns, four\" \"2*broad, columns, four\" \"3*broad, columns, four\" \"4*broad, columns, four\"))}][stopper={${3:$$(yas/choose-value '(\" \" \".\" \")\" \":\"))}}]\n`(replace-regexp-in-string \"^[[:blank:]]+\" \"\\s\\s\"\n(replace-regexp-in-string \"\\\\\\\\startitem[[:blank:]]+\\\\\\\\stopitem\\n\" \"\"\n(replace-regexp-in-string \"[\\\\]+\" \"\\\\\\\\\"\n(replace-regexp-in-string \"~\" \"\\\\\\\\textasciitilde \"\n(replace-regexp-in-string \"#\" \"\\\\\\\\#\"\n(replace-regexp-in-string \"&\" \"\\\\\\\\&\"\n(replace-regexp-in-string \"|\" \"\\\\\\\\textbar \"\n(replace-regexp-in-string \"%\" \"\\\\\\\\percent \"\n(replace-regexp-in-string \"\\\\(%\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\percent\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(|\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textbar\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(~\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textasciitilde\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([\\$]\\\\)\\\\([[:nonascii:]A-Za-z0-9]+\\\\)\" \"\\\\\\\\textdollar \"\n(replace-regexp-in-string \"\\\\([^a-zA-Z#&|]\\\\)\\\\([\\\\]+\\\\)\\\\([^a-zA-Z#&|]\\\\)\" \"\\\\\\\\letterbackslash\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quotation{\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([»\\\"“„”]\\\\)\" \"}\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quote{\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹\\'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([›\\'‘‚’]\\\\)\" \"}\"\n(replace-regexp-in-string \"$\" \" \\\\\\\\stopitem\"\n(replace-regexp-in-string \"^\" \"\\s\\s\\\\\\\\startitem \"\n(yas-selected-text) t) t) nil nil 4) nil nil 2) nil nil 3) nil nil 1) nil nil 2) nil nil 1) nil nil 1) nil nil 1) nil nil 1)))))))))`\n\\stopitemize\n$0" "Lines in region as list [sep: \\n+]" nil
                            ("Enumerations")
                            ((yas/indent-line 'fixed)
                             (yas/wrap-around-region 'nil))
                            "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/e_Enumerations/c_lines_in_region_as_list.yasnippet" "C-c l s" nil)
                       ("yclist" "\\startitemize[continue]\n`(replace-regexp-in-string \"^[[:blank:]]+\" \"\\s\\s\"\n(replace-regexp-in-string \"\\\\\\\\startitem[[:blank:]]+\\\\\\\\stopitem\\n\" \"\"\n(replace-regexp-in-string \"[\\\\]+\" \"\\\\\\\\\"\n(replace-regexp-in-string \"~\" \"\\\\\\\\textasciitilde \"\n(replace-regexp-in-string \"#\" \"\\\\\\\\#\"\n(replace-regexp-in-string \"&\" \"\\\\\\\\&\"\n(replace-regexp-in-string \"|\" \"\\\\\\\\textbar \"\n(replace-regexp-in-string \"%\" \"\\\\\\\\percent \"\n(replace-regexp-in-string \"\\\\(%\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\percent\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(|\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textbar\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(~\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textasciitilde\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([\\$]\\\\)\\\\([[:nonascii:]A-Za-z0-9]+\\\\)\" \"\\\\\\\\textdollar \"\n(replace-regexp-in-string \"\\\\([^a-zA-Z#&|]\\\\)\\\\([\\\\]+\\\\)\\\\([^a-zA-Z#&|]\\\\)\" \"\\\\\\\\letterbackslash\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quotation{\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([»\\\"“„”]\\\\)\" \"}\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quote{\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹\\'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([›\\'‘‚’]\\\\)\" \"}\"\n(replace-regexp-in-string \"$\" \" \\\\\\\\stopitem\"\n(replace-regexp-in-string \"^\" \"\\s\\s\\\\\\\\startitem \"\n(current-kill 0) t) t) nil nil 4) nil nil 2) nil nil 3) nil nil 1) nil nil 2) nil nil 1) nil nil 1) nil nil 1) nil nil 1)))))))))`\n\\stopitemize\n$0" "Yank lines as continued list [sep: \\n+]" nil
                        ("Enumerations")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/e_Enumerations/b_yank_lines_as_continued_list.yasnippet" nil nil)
                       ("ylist" "\\startitemize[${1:$$(yas/choose-value '(\"n\" \"a\" \"A\" \"KA\" \"r\" \"R\" \"KR\" \"g\" \"m\" \"1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\"))},${2:$$(yas/choose-value '(\"standard\" \"packed\" \"paragraph\" \"serried\" \"2*serried\" \"3*serried\" \"4*serried\" \"broad\" \"2*broad\" \"3*broad\" \"4*broad\" \"standard, columns\" \"packed, columns\" \"paragraph, columns\" \"serried, columns\" \"2*serried, columns\" \"3*serried, columns\" \"4*serried, columns\" \"broad, columns\" \"2*broad, columns\" \"3*broad, columns\" \"4*broad, columns\" \"standard, columns, three\" \"packed, columns, three\" \"paragraph, columns, three\" \"serried, columns, three\" \"2*serried, columns, three\" \"3*serried, columns, three\" \"4*serried, columns, three\" \"broad, columns, three\" \"2*broad, columns, three\" \"3*broad, columns, three\" \"4*broad, columns, three\" \"standard, columns, four\" \"packed, columns, four\" \"paragraph, columns, four\" \"serried, columns, four\" \"2*serried, columns, four\" \"3*serried, columns, four\" \"4*serried, columns, four\" \"broad, columns, four\" \"2*broad, columns, four\" \"3*broad, columns, four\" \"4*broad, columns, four\"))}][stopper={${3:$$(yas/choose-value '(\" \" \".\" \")\" \":\"))}}]\n`(replace-regexp-in-string \"^[[:blank:]]+\" \"\\s\\s\"\n(replace-regexp-in-string \"\\\\\\\\startitem[[:blank:]]+\\\\\\\\stopitem\\n\" \"\"\n(replace-regexp-in-string \"[\\\\]+\" \"\\\\\\\\\"\n(replace-regexp-in-string \"~\" \"\\\\\\\\textasciitilde \"\n(replace-regexp-in-string \"#\" \"\\\\\\\\#\"\n(replace-regexp-in-string \"&\" \"\\\\\\\\&\"\n(replace-regexp-in-string \"|\" \"\\\\\\\\textbar \"\n(replace-regexp-in-string \"%\" \"\\\\\\\\percent \"\n(replace-regexp-in-string \"\\\\(%\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\percent\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(|\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textbar\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(~\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textasciitilde\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([\\$]\\\\)\\\\([[:nonascii:]A-Za-z0-9]+\\\\)\" \"\\\\\\\\textdollar \"\n(replace-regexp-in-string \"\\\\([^a-zA-Z#&|]\\\\)\\\\([\\\\]+\\\\)\\\\([^a-zA-Z#&|]\\\\)\" \"\\\\\\\\letterbackslash\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quotation{\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([»\\\"“„”]\\\\)\" \"}\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quote{\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹\\'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([›\\'‘‚’]\\\\)\" \"}\"\n(replace-regexp-in-string \"$\" \" \\\\\\\\stopitem\"\n(replace-regexp-in-string \"^\" \"\\s\\s\\\\\\\\startitem \"\n(current-kill 0) t) t) nil nil 4) nil nil 2) nil nil 3) nil nil 1) nil nil 2) nil nil 1) nil nil 1) nil nil 1) nil nil 1)))))))))`\n\\stopitemize\n$0" "Yank lines as list [sep: \\n+]" nil
                        ("Enumerations")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/e_Enumerations/a_yank_lines_as_list.yasnippet" nil nil)))


;;; Snippet definitions:
;;;
(yas-define-snippets 'context-mode
                     '((nil "\\startalign[center]\n  \\m{${1:M$(upcase yas-text)}_{${2:m},${3:n}} = }\n    \\startmathmatrix[left={\\left${4:$$(yas/choose-value '(\"(\" \"[\"))}\\,}, right={\\,\\right${4:$(replace-regexp-in-string \"\\\\\\(\" \")\" (replace-regexp-in-string \"\\\\\\[\" \"]\" yas-text))}}]\n      `(replace-regexp-in-string \"\\n\" \"\\n\\s\\s\\s\\s\\s\\s\"\n (replace-regexp-in-string \"[\\t]\" \"\"\n (replace-regexp-in-string \"[\\t]+\" \"\"\n (replace-regexp-in-string \"\\\\\\\\NC \\\\\\\\NR\" \"\\\\\\\\NR\"\n (replace-regexp-in-string \"\\\\\\\\NC \\\\\\\\NC\" \"\\\\\\\\NC\"\n (replace-regexp-in-string \"[ ]+\" \" \\\\\\\\NC \"\n (replace-regexp-in-string \"^\" \"\\\\\\\\NC \"\n (replace-regexp-in-string \"$\" \" \\\\\\\\NR\"\n (yas-selected-text)))))))))`\n    \\stopmathmatrix\n\\stopalign\n$0" "Numbers in region as matrix [sep: \\s+ \\n]" nil
                            ("Mathematics")
                            ((yas/indent-line 'fixed)
                             (yas/wrap-around-region 'nil))
                            "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/f_Mathematics/h_numbers_in_region_as_matrix.yasnippet" "C-c m x" nil)
                       (nil "\\HBX{`(yas-selected-text)`}$0" "Region inside highlight box" nil
                            ("Mathematics")
                            ((yas/indent-line 'fixed)
                             (yas/wrap-around-region 'nil))
                            "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/f_Mathematics/g_region_inside_highlight_box.yasnippet" "C-c h b x" nil)
                       ("ahbx" "%%%%% MATH HIGHLIGHT BOX ACTIVATION %%%%%%%%%%%%%\n%% Usage: 1. hbx + tab 2. \\HBX{math expr}\n%%    or: 1. region-ize math expression  2. hit C-c h b x\n%% Note: (setq yas-triggers-in-field t) enables usage of nested snippets\n%% Example usage: \\m{ \\HBX{2x + y}}\n%%                .. \\NC \\HBX{2x + y} \\NC ..\n\\definemathframed\n  [HBX]%\n  [backgroundcolor=${1:$$(yas/choose-value '(\" \" \"black\" \"blue\" \"cyan\" \"darkblue\" \"darkcyan\" \"darkgray\" \"darkgreen\" \"darkmagenta\" \"darkred\" \"darkyellow\" \"gray\" \"green\" \"lightblue\" \"lightgray\" \"lightgreen\" \"lightred\" \"magenta\" \"middleblue\" \"middlecyan\" \"middlegray\" \"middlegreen\" \"middlemagenta\" \"middlered\" \"middleyellow\" \"orange\" \"red\" \"white\" \"yellow\"))},backgroundoffset=2pt,frame=off,\n   location=mathematics,background=color]%\n%%%%% END OF MHB ACTIVATION %%%%%%%%%%%%%%%%%%%%%\n$0" "Activate highlight box" nil
                        ("Mathematics")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/f_Mathematics/f_activate_highlight_box.yasnippet" nil nil)
                       ("hbx" "\\HBX{${1:EXPR}}$0" "Highlight box" nil
                        ("Mathematics")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/f_Mathematics/e_hightlight_box.yasnippet" nil nil)
                       ("mxf" "\\startalign[center]\n  \\m{${1:M$(upcase yas-text)}_{${2:m},${3:n}} = }\n    \\startmathmatrix[left={\\left${4:$$(yas/choose-value '(\"(\" \"[\"))}\\,}, right={\\,\\right${4:$(replace-regexp-in-string \"\\\\\\(\" \")\" (replace-regexp-in-string \"\\\\\\[\" \"]\" yas-text))}}]\n      \\NC ${1:$(downcase yas-text)}_{1,1} \\NC ${1:$(downcase yas-text)}_{1,2} \\NC \\cdots \\NC ${1:$(downcase yas-text)}_{1,$3} \\NR\n      \\NC ${1:$(downcase yas-text)}_{2,1} \\NC ${1:$(downcase yas-text)}_{2,2} \\NC \\cdots \\NC ${1:$(downcase yas-text)}_{2,$3} \\NR\n      \\NC \\vdots \\NC \\vdots \\NC \\ddots \\NC \\vdots \\NR\n      \\NC ${1:$(downcase yas-text)}_{$2,1} \\NC ${1:$(downcase yas-text)}_{$2,2} \\NC \\cdots \\NC ${1:$(downcase yas-text)}_{$2,$3} \\NR\n    \\stopmathmatrix\n\\stopalign\n$0" "Matrix formula" nil
                        ("Mathematics")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/f_Mathematics/d_marix_formula.yasnippet" nil nil)
                       ("umf" "\\startformula\n  \\startalign[align={left,left},m=1,n=2]\n     \\NC  ${1:EXPR } \\NC ${2:EXPR } \\NR\n     \\NC  ${3:EXPR } \\NC ${4:EXPR } \\NR\n  \\stopalign\n\\stopformula\n$0" "Unnumbered math formula" nil
                        ("Mathematics")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/f_Mathematics/c_unnumbered_math_formula.yasnippet" nil nil)
                       ("nmf" "\\startplaceformula[reference={formula:${1:REFERENCE NAME}}]\n  \\startformula\n    \\startalign[align={left,left},m=1,n=2]\n       \\NC  ${2:EXPR } \\NC ${3:EXPR } \\NR\n       \\NC  ${4:EXPR } \\NC ${5:EXPR } \\NR\n    \\stopalign\n  \\stopformula\n\\stopplaceformula\n$0" "Numbered math formula" nil
                        ("Mathematics")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/f_Mathematics/b_numbered_math_formula.yasnippet" nil nil)
                       ("iexpr" "\\m{ ${1:} } $0" "Inline expression" nil
                        ("Mathematics")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/f_Mathematics/a_inline_expression.yasnippet" nil nil)))


;;; Snippet definitions:
;;;
(yas-define-snippets 'context-mode
                     '(("actpgf" "%%%%% PGF/TIKZ ACTIVATION %%%%%%%%%%%%%%%%%%%%%%%\n\\usemodule[tikz]\n\\usemodule[pgfplots]\n\\usemodule[pgfplotstable]\n\\usepgfplotslibrary[statistics]\n\\usepgfplotslibrary[dateplot]\n\\usetikzlibrary{plotmarks}\n\\pgfplotsset{compat=1.4}\n\\pgfplotsset{width={0.5\\textwidth}}  %% Size of each plot set to 50% of text width\n%% Properties of each plot:\n\\pgfplotsset{\n  legend columns=-1,\n  every axis legend/.append style={font={\\switchtobodyfont[dejavu,ss,12pt]\\tfx},color=black,at={(1,1.062)},\n                                   anchor=north east,draw=none,fill=none},\n  every axis title/.append style={font={\\switchtobodyfont[dejavu,ss,12pt]\\tf},color=black,at={(0,1.042)},\n                                  anchor=north east,draw=none,fill=none},\n  every axis label/.append style={font={\\switchtobodyfont[dejavu,ss,12pt]\\tfx},color=black},\n  every x tick label/.append style={font={\\switchtobodyfont[dejavu,ss,10pt]\\tfx},color=black},\n  every y tick label/.append style={font={\\switchtobodyfont[dejavu,ss,10pt]\\tfx},color=black},\n  every z tick label/.append style={font={\\switchtobodyfont[dejavu,ss,10pt]\\tfx},color=black},\n  nodes near coords style={font={\\switchtobodyfont[dejavu,ss,8pt]\\tfx},color=black},\n}\n\\pgfplotsset{cycle list name=auto} %% 'auto' 'color' 'linestyles' 'exotic' 'black white' 'mark list' 'exotic'\n%%%%% END OF ACTIVATION %%%%%%%%%%%%%%%%%%%%%%%%%\n$0" "Activate TikZ/PGF" nil
                        ("Graphics & Floats" "TikZ/PGF")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/g_Graphics_and_floats/a_Tikz_and_Pgf/c_activate_tikz_pgf.yasnippet" nil nil)
                       ("tikzdg" "\\startplacefigure[location={${1:$$(yas/choose-value '(\"left\" \"right\" \"here\" \"top\" \"bottom\" \"inleft\" \"inright\" \"inmargin\" \"margin\" \"page\" \"opposite\" \"always\" \"force\"))}${3:$(cond ((string-equal \"numbered caption\" yas-text) (concat \"\"))((string-equal \"unnumbered caption\" yas-text)(concat \",nonumber\"))((string-equal \"no caption\" yas-text)(concat \",none\")))}},title={${2:TITLE}},list={$2},reference={figure:${2:$(replace-regexp-in-string \"[ ]+\" \"\" (capitalize (replace-regexp-in-string \"[^[:nonascii:]a-z0-9A-Z]\" \" \" yas-text)))}}] %% Use ${3:$$(yas/choose-value '(\"numbered caption\" \"unnumbered caption\" \"no caption\"))}\n  \\startframedtext[align=center,frame=off,height=fit,width=\\textwidth,boffset=0cm,loffset=0cm,roffset=0cm,toffset=0cm]%\n    \\starttikzpicture[scale=2,\n                      ${4:DIAGRAM SETTINGS}]\n      $0\n    \\stoptikzpicture\n  \\stopframedtext\n\\stopplacefigure" "TikZ diagram" nil
                        ("Graphics & Floats" "TikZ/PGF")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/g_Graphics_and_floats/a_Tikz_and_Pgf/b_tikz_diagram.yasnippet" nil nil)
                       ("pgfpt" "\\startplacefigure[location={${1:$$(yas/choose-value '(\"left\" \"right\" \"here\" \"top\" \"bottom\" \"inleft\" \"inright\" \"inmargin\" \"margin\" \"page\" \"opposite\" \"always\" \"force\"))}${3:$(cond ((string-equal \"numbered caption\" yas-text) (concat \"\"))((string-equal \"unnumbered caption\" yas-text)(concat \",nonumber\"))((string-equal \"no caption\" yas-text)(concat \",none\")))}},title={${2:TITLE}},list={$2},reference={figure:${5:$(replace-regexp-in-string \"[-._]+\" \"\" (capitalize yas-text))}}] %% Use ${3:$$(yas/choose-value '(\"numbered caption\" \"unnumbered caption\" \"no caption\"))}\n  \\startframedtext[align=center,frame=off,height=fit,width=\\textwidth,boffset=0cm,loffset=0cm,roffset=0cm,toffset=0cm]%\n    \\starttikzpicture\n      \\start${4:$$(yas/choose-value '(\"axis\" \"semilogxaxis\" \"semilogyaxis\" \"loglogaxis\"))}\n        [${9:PGF CODE}\n         xlabel={$6},ylabel={$7}]\n        \\addplot table [x=${6:COLUMN NAME},y=${7:COLUMN NAME},col sep=${8:$$(yas/choose-value '(\"semicolon\" \"comma\"))}]{`(if (boundp 'user-default-csv-files-dir)(progn (file-name-as-directory (symbol-value 'user-default-csv-files-dir)))(concat \"\"))`${5:$$(cond ((and (boundp 'user-default-csv-files-dir) (>(length (append (directory-files user-default-csv-files-dir t \"^[^.]*\\\\.csv$\") (directory-files user-default-csv-files-dir t \"^[^.]*\\\\.CSV$\")))0))(yas-choose-value (mapcar '(lambda (x) (file-name-nondirectory x)) (append (directory-files user-default-csv-files-dir t \"^[^.]*\\\\.csv$\") (directory-files user-default-csv-files-dir t \"^[^.]*\\\\.CSV$\")) )))((> (length (append (directory-files (expand-file-name (file-name-directory buffer-file-name)) t \"^[^.]*\\\\.csv$\")(directory-files (expand-file-name (file-name-directory buffer-file-name)) t \"^[^.]*\\\\.CSV$\")))0)(yas-choose-value (mapcar '(lambda (x) (file-name-nondirectory x)) (append (directory-files (expand-file-name (file-name-directory buffer-file-name)) t \"^[^.]*\\\\.csv$\") (directory-files (expand-file-name (file-name-directory buffer-file-name)) t \"^[^.]*\\\\.CSV$\")))))(t(yas-text)))`(if (boundp 'user-default-csv-files-dir)(concat \"\")(concat \"full_path_to_somefile.csv\"))`}};\n      \\stop$4\n    \\stoptikzpicture\n  \\stopframedtext\n\\stopplacefigure\n$0" "PGF plot" nil
                        ("Graphics & Floats" "TikZ/PGF")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/g_Graphics_and_floats/a_Tikz_and_Pgf/a_pgf_plot.yasnippet" nil nil)))


;;; Snippet definitions:
;;;
(yas-define-snippets 'context-mode
                     '(("actlst" "%%%%% LISTINGS ACTIVATION %%%%%%%%%%%%%%%%%%%%%%%\n%% Language/syntax: ${1:$$(yas/choose-value '(\" \" \"aap\" \"abc\" \"abel\" \"acedb\" \"alsaconf\" \"ada\" \"aml\" \"ampl\" \"ant\" \"antlr\" \"apache\" \"apachestyle\" \"aptconf\" \"arch\" \"arduino\" \"asciidoc\" \"aspperl\" \"aspvbs\" \"atlas\" \"autohotkey\" \"autoit\" \"automake\" \"avenue\" \"awk\" \"b\" \"basic\" \"bash\" \"bc\" \"bdf\" \"bib\" \"bindzone\" \"bst\" \"bzr\" \"c\" \"cabal\" \"calendar\" \"cf\" \"cfg\" \"ch\" \"chaiscript\" \"chaskell\" \"clojure\" \"cmake\" \"cobol\" \"config\" \"context\" \"cs\" \"cpp\" \"crontab\" \"csh\" \"css\" \"cucumber\" \"cvs\" \"cvsrc\" \"d\" \"datascript\" \"denyhosts\" \"diff\" \"django\" \"dns\" \"dnsmasq\" \"docbk\" \"docbksgml\" \"docbkxml\" \"dosbatch\" \"dot\" \"doxygen\" \"dracula\" \"dsl\" \"dtd\" \"dtml\" \"dylan\" \"dylanintr\" \"dylanlid\" \"eiffel\" \"elf\" \"elinks\" \"erlang\" \"esterel\" \"eterm\" \"eruby\" \"expect\" \"falcon\" \"fetchmail\" \"flexwiki\" \"form\" \"framescript\" \"freebasic\" \"fstab\" \"gdb\" \"git\" \"gitcommit\" \"gitconfig\" \"gitolite\" \"gitrebase\" \"gitsendemail\" \"go\" \"godoc\" \"gnuplot\" \"gp\" \"gpg\" \"gretl\" \"groff\" \"groovy\" \"grub\" \"gsp\" \"html\" \"haml\" \"hamster\" \"haskell\" \"help\" \"hgcommit\" \"hog\" \"hostconf\" \"hostsaccess\" \"html\" \"htmlcheetah\" \"htmldjango\" \"htmlm4\" \"htmlos\" \"ia64\" \"ibasic\" \"icon\" \"idl\" \"idlang\" \"indent\" \"inform\" \"initex\" \"inittab\" \"ipfilter\" \"j\" \"jal\" \"java\" \"javacc\" \"javascript\" \"jess\" \"jgraph\" \"jovial\" \"jproperties\" \"json\" \"jsp\" \"kivy\" \"kix\" \"kscript\" \"kwt\" \"latte\" \"ld\" \"ldapconf\" \"ldif\" \"lex\" \"lftp\" \"lhaskell\" \"lifelines\" \"lilo\" \"limits\" \"liquid\" \"lisp\" \"lite\" \"litestep\" \"loginaccess\" \"logindefs\" \"logtalk\" \"lout\" \"lpc\" \"lprolog\" \"lscript\" \"lsl\" \"lss\" \"lua\" \"lynx\" \"m4\" \"mail\" \"mailaliases\" \"mailcap\" \"make\" \"mallard\" \"man\" \"manconf\" \"manual\" \"maple\" \"markdown\" \"mason\" \"matlab\" \"maxima\" \"mel\" \"messages\" \"mf\" \"mgl\" \"mix\" \"mma\" \"mmix\" \"modconf\" \"model\" \"modula2\" \"modula3\" \"mp\" \"mplayerconf\" \"msmessages\" \"msql\" \"muttrc\" \"mysql\" \"named\" \"nanorc\" \"netrc\" \"ninja\" \"nroff\" \"nsis\" \"objc\" \"objcpp\" \"ocaml\" \"occam\" \"opl\" \"ora\" \"pamconf\" \"papp\" \"pascal\" \"passwd\" \"perl\" \"perl6\" \"pf\" \"pfmain\" \"php\" \"phtml\" \"pike\" \"pine\" \"pinfo\" \"plaintex\" \"pli\" \"plp\" \"plsql\" \"po\" \"pod\" \"privoxy\" \"procmail\" \"progress\" \"prolog\" \"promela\" \"proto\" \"protocols\" \"ptcap\" \"pyrex\" \"python\" \"r\" \"radiance\" \"rc\" \"readline\" \"rebol\" \"registry\" \"resolv\" \"reva\" \"rexx\" \"rmd\" \"rnc\" \"rng\" \"rnoweb\" \"robots\" \"rpcgen\" \"rpl\" \"rrst\" \"rst\" \"rtf\" \"ruby\" \"samba\" \"sas\" \"sass\" \"sather\" \"scheme\" \"scilab\" \"sdl\" \"sed\" \"sendpr\" \"sensors\" \"services\" \"setserial\" \"sgml\" \"sgmldecl\" \"sgmllnx\" \"sh\" \"sieve\" \"simula\" \"skill\" \"slang\" \"sm\" \"smarty\" \"smcl\" \"sml\" \"snobol4\" \"spec\" \"specman\" \"splint\" \"spyce\" \"sql\" \"sqlanywhere\" \"sqlforms\" \"sqlhana\" \"sqlinformix\" \"sqlj\" \"sqloracle\" \"sqr\" \"squid\" \"sshconfig\" \"sshdconfig\" \"st\" \"stata\" \"sudoers\" \"svg\" \"svn\" \"sysctl\" \"tcl\" \"tcsh\" \"terminfo\" \"tex\" \"texinfo\" \"texmf\" \"tidy\" \"treetop\" \"tt2\" \"tt2html\" \"tt2js\" \"udev\" \"udevperm\" \"udevrules\" \"uil\" \"updatedb\" \"vb\" \"vim\" \"viminfo\" \"wget\" \"wml\" \"wsh\" \"wsml\" \"xbl\" \"xdefaults\" \"xf86conf\" \"xhtml\" \"xinetd\" \"xkb\" \"xml\" \"xmodmap\" \"xpm\" \"xpm2\" \"xquery\" \"xs\" \"xsl\" \"xslt\" \"zimbu\" \"zsh\"))}\n%% Frames: ${2:$$(yas/choose-value '(\"Unframed code\" \"Framed code with rectangular corners\" \"Framed code with round corners\"))}\n%% Background: ${3:$$(yas/choose-value '(\"White background\" \"Lightgray background\"))}\n%% Line numbers: ${4:$$(yas/choose-value '(\"No line numbers\" \"Black line numbers\" \"Darkblue line numbers\" \"Darkgreen line numbers\" \"Darkred line numbers\" \"Darkyellow line numbers\"))}\n%% Color scheme: ${5:$$(yas/choose-value '(\"pscolor - colorful syntax highlighting\" \"blackandwhite - syntax highlighting in black and white\"))}\n\\usemodule[vim]\n\\definefloat[listing][listings]\n\\defineframedtext[$1framedcode][width={\\textwidth},offset=0.8em${2:$(cond ((string-equal \"Unframed code\" yas-text)(concat \",frame=off\"))((string-equal \"Framed code with rectangular corners\" yas-text)(concat \",frame=on,corner=rectangular\"))((string-equal \"Framed code with round corners\" yas-text)(concat \",frame=on,corner=round\")))}${3:$(cond ((string-equal \"White background\" yas-text)(delete-char 0))((string-equal \"Lightgray background\" yas-text)(concat \",background=color,backgroundcolor=lightgray\")))}]\n\\defineframed[inlineframe][background=color,backgroundcolor=lightgray,frame=off,offset=overlay,strut=yes]\n\\definevimtyping[code${1:$(upcase yas-text)}][syntax=$1,${5:$(cond ((string-equal \"pscolor - colorful syntax highlighting\" yas-text)(concat \"alternative=pscolor\"))((string-equal \"blackandwhite - syntax highlighting in black and white\" yas-text)(concat \"alternative=blackandwhite\")))},style={\\switchtobodyfont[modern,small,tt]}]\n\\definevimtyping\n  [${1:$(upcase yas-text)}]\n  [syntax=$1,style={\\switchtobodyfont[modern,small,tt]},space=off,strip=no,lines=fixed,\n   escape=off,tab=4,before={\\start$1framedcode},after={\\stop$1framedcode}${4:$(cond ((string-equal \"No line numbers\" yas-text)(delete-char 0))((string-equal \"Black line numbers\" yas-text)(concat \",numbering=yes,\\n\\s\\s\\snumberstyle={\\\\\\ttx},numbercolor=black,numberdistance={-0.055\\\\\\textwidth},margin={0.08\\\\\\textwidth}\"))((string-equal \"Darkblue line numbers\" yas-text)(concat \",numbering=yes,\\n\\s\\s\\snumberstyle={\\\\\\ttx},numbercolor=darkblue,numberdistance={-0.055\\\\\\textwidth},margin={0.08\\\\\\textwidth}\"))((string-equal \"Darkgreen line numbers\" yas-text)(concat \",numbering=yes,\\n\\s\\s\\snumberstyle={\\\\\\ttx},numbercolor=darkgreen,numberdistance={-0.055\\\\\\textwidth},margin={0.08\\\\\\textwidth}\"))((string-equal \"Darkred line numbers\" yas-text)(concat \",numbering=yes,\\n\\s\\s\\snumberstyle={\\\\\\ttx},numbercolor=darkred,numberdistance={-0.055\\\\\\textwidth},margin={0.08\\\\\\textwidth}\"))((string-equal \"Darkyellow line numbers\" yas-text)(concat \",numbering=yes,\\n\\s\\s\\snumberstyle={\\\\\\ttx},numbercolor=darkyellow,numberdistance={-0.055\\\\\\textwidth},margin={0.08\\\\\\textwidth}\")))}${5:$(cond ((string-equal \"pscolor - colorful syntax highlighting\" yas-text)(concat \",alternative=pscolor\"))((string-equal \"blackandwhite - syntax highlighting in black and white\" yas-text)(concat \",alternative=blackandwhite\")))}]\n%%%%% END OF ACTIVATION %%%%%%%%%%%%%%%%%%%%%%%%%\n$0" "Activate listings" nil
                        ("Graphics & Floats" "Listings")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/g_Graphics_and_floats/b_Listings/f_activate_listings.yasnippet" nil nil)
                       ("ficode" "\\inlineframe{\\inlinecode${1:IDENTIFIER$$(upcase yas-text)}{${2:CODE}}}$0" "Framed inline code" nil
                        ("Graphics & Floats" "Listings")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/g_Graphics_and_floats/b_Listings/e_framed_inline_code.yasnippet" nil nil)
                       ("icode" "\\inlinecode${1:IDENTIFIER$$(upcase yas-text)}{${2:CODE}}$0" "Inline code" nil
                        ("Graphics & Floats" "Listings")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/g_Graphics_and_floats/b_Listings/d_inline_code.yasnippet" nil nil)
                       ("lstfile" "\\startplacelisting[location=here,title={${3:$2}},list={$3},reference={listing:${3:$(replace-regexp-in-string \"[ ]+\" \"\" (capitalize (replace-regexp-in-string \"[^[:nonascii:]a-z0-9A-Z]\" \" \" yas-text)))}}]\n  \\type${1:IDENTIFIER$$(upcase yas-text)}file{${2:FILE NAME}}\n\\stopplacelisting\n$0" "External file as listing" nil
                        ("Graphics & Floats" "Listings")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/g_Graphics_and_floats/b_Listings/c_external_file_as_listing.yasnippet" nil nil)
                       ("ylst" "\\startplacelisting[location=here,title={${1:TITLE}},list={$1},reference={listing:${1:$(replace-regexp-in-string \"[ ]+\" \"\" (capitalize (replace-regexp-in-string \"[^[:nonascii:]a-z0-9A-Z]\" \" \" yas-text)))}}]\n\\start${2:IDENTIFIER$$(upcase yas-text)}\n`(current-kill 0)`\n\\stop$2\n\\stopplacelisting\n$0" "Yank as listing" nil
                        ("Graphics & Floats" "Listings")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/g_Graphics_and_floats/b_Listings/b_yank_as_listing.yasnippet" nil nil)
                       ("lst" "\\startplacelisting[location=here,title={${1:TITLE}},list={$1},reference={listing:${1:$(replace-regexp-in-string \"[ ]+\" \"\" (capitalize (replace-regexp-in-string \"[^[:nonascii:]a-z0-9A-Z]\" \" \" yas-text)))}}]\n\\start${2:IDENTIFIER$$(upcase yas-text)}\n${3:$2 CODE}\n\\stop$2\n\\stopplacelisting\n$0" "Listing" nil
                        ("Graphics & Floats" "Listings")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/g_Graphics_and_floats/b_Listings/a_listing.yasnippet" nil nil)))


;;; Snippet definitions:
;;;
(yas-define-snippets 'context-mode
                     '(("actfg" "%%%%% FIGURES ACTIVATION %%%%%%%%%%%%%%%%%%%%%%%%\n%% Path to figures directory: ${1:`(if (boundp 'user-default-figures-dir)(progn (symbol-value 'user-default-figures-dir))(concat \"PATH\"))`}\n\\setupexternalfigures\n  [directory={$1},\n   order={pdf,jpeg,png,mps},\n   location={global,local,default},frame=off,maxwidth={\\textwidth},maxheight={0.8\\textheight}]\n\\setupcombinations[distance=5em,after={\\blank[5ex]}] %% Gap around combo figures\n%%%%% END OF ACTIVATION %%%%%%%%%%%%%%%%%%%%%%%%%\n$0" "Activate usage of figures" nil
                        ("Graphics & Floats" "Figures")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/g_Graphics_and_floats/c_Figures/f_activate_usage_of_figures.yasnippet" nil nil)
                       ("cbfg" "%%%%% COMBINATION OF FIGURES %%%%%%%%%%%%%%%%%%%%\n%% Directory: ${1:$$(let* ((rlist '()) (flist (directory-files figures-dir t \"[^.]+$\")))(mapcar '(lambda (x) (if (file-directory-p x)(add-to-list 'rlist (file-name-nondirectory x)))) flist)(yas/choose-value rlist))}\n%% Location on page: ${2:$$(yas/choose-value '(\"left\" \"right\" \"here\" \"top\" \"bottom\" \"inleft\" \"inright\" \"inmargin\" \"margin\" \"page\" \"opposite\" \"always\" \"force\"))}\n%% Columns and rows: ${3:$$(let* ((fdir (format \"%s/%s\" figures-dir (yas-field-value 1)))(fnum (length  (append  (directory-files fdir t \"^[^.]+[.]pdf$\")  (directory-files fdir t \"^[^.]+[.]PDF$\") (directory-files fdir t \"^[^.]+[.]mps$\") (directory-files fdir t \"^[^.]+[.]MPS$\") (directory-files fdir t \"^[^.]+[.]jpg$\") (directory-files fdir t \"^[^.]+[.]JPG$\") (directory-files fdir t \"^[^.]+[.]jpeg$\") (directory-files fdir t \"^[^.]+[.]JPEG$\") (directory-files fdir t \"^[^.]+[.]png$\") (directory-files fdir t \"^[^.]+[.]PNG$\") (directory-files fdir t \"^[^.]+[.]jp2$\") (directory-files fdir t \"^[^.]+[.]JP2$\") (directory-files fdir t \"^[^.]+[.]jbig$\") (directory-files fdir t \"^[^.]+[.]JBIG$\") (directory-files fdir t \"^[^.]+[.]jbig2$\") (directory-files fdir t \"^[^.]+[.]JBIG2$\") (directory-files fdir t \"^[^.]+[.]jb2$\") (directory-files fdir t \"^[^.]+[.]JB2$\") (directory-files fdir t \"^[^.]+[.]svg$\") (directory-files fdir t \"^[^.]+[.]SVG$\") (directory-files fdir t \"^[^.]+[.]svgz$\") (directory-files fdir t \"^[^.]+[.]SVGZ$\") (directory-files fdir t \"^[^.]+[.]eps$\") (directory-files fdir t \"^[^.]+[.]EPS$\") (directory-files fdir t \"^[^.]+[.]ai$\") (directory-files fdir t \"^[^.]+[.]AI$\") (directory-files fdir t \"^[^.]+[.]gif$\") (directory-files fdir t \"^[^.]+[.]GIF$\") (directory-files fdir t \"^[^.]+[.]tiff$\") (directory-files fdir t \"^[^.]+[.]TIFF$\")))))(cond ((= fnum 2) (yas/choose-value '(\"1*2\" \"2*1\")))((= fnum 3) (yas/choose-value '(\"1*3\" \"2*2\" \"3*1\")))((= fnum 4) (yas/choose-value '(\"1*4\" \"2*2\" \"3*2\" \"4*1\")))((= fnum 5) (yas/choose-value '(\"1*5\" \"2*3\" \"3*2\" \"4*2\" \"5*1\")))((= fnum 6) (yas/choose-value '(\"1*6\" \"2*3\" \"3*2\" \"4*2\" \"5*2\" \"6*1\")))((= fnum 7) (yas/choose-value '(\"1*7\" \"2*4\" \"3*3\" \"4*2\" \"5*2\" \"6*2\" \"7*1\")))((= fnum 8) (yas/choose-value '(\"1*8\" \"2*4\" \"3*3\" \"4*2\" \"5*2\" \"6*2\" \"7*2\" \"8*1\")))((= fnum 9) (yas/choose-value '(\"1*9\" \"2*5\" \"3*3\" \"4*3\" \"5*2\" \"6*2\" \"7*2\" \"8*2\" \"9*1\")))((= fnum 10) (yas/choose-value '(\"1*10\" \"2*5\" \"3*4\" \"4*3\" \"5*2\" \"6*2\" \"7*2\" \"8*2\" \"9*2\" \"10*1\")))((= fnum 11) (yas/choose-value '(\"1*11\" \"2*6\" \"3*4\" \"4*3\" \"5*3\" \"6*2\" \"7*2\" \"8*2\" \"9*2\" \"10*2\" \"11*1\")))((= fnum 12) (yas/choose-value '(\"1*12\" \"2*6\" \"3*4\" \"4*3\" \"5*3\" \"6*2\" \"7*2\" \"8*2\" \"9*2\" \"10*2\" \"11*2\" \"12*1\")))((= fnum 13) (yas/choose-value '(\"1*13\" \"2*7\" \"3*5\" \"4*4\" \"5*3\" \"6*3\" \"7*2\" \"8*2\" \"9*2\" \"10*2\" \"11*2\" \"12*2\" \"13*1\")))((= fnum 14) (yas/choose-value '(\"1*14\" \"2*7\" \"3*5\" \"4*4\" \"5*3\" \"6*3\" \"7*2\" \"8*2\" \"9*2\" \"10*2\" \"11*2\" \"12*2\" \"13*2\" \"14*1\")))((= fnum 15) (yas/choose-value '(\"1*15\" \"2*8\" \"3*5\" \"4*4\" \"5*3\" \"6*3\" \"7*3\" \"8*2\" \"9*2\" \"10*2\" \"11*2\" \"12*2\" \"13*2\" \"14*2\" \"15*1\")))((= fnum 16) (yas/choose-value '(\"1*16\" \"2*8\" \"3*6\" \"4*4\" \"5*4\" \"6*3\" \"7*3\" \"8*2\" \"9*2\" \"10*2\" \"11*2\" \"12*2\" \"13*2\" \"14*2\" \"15*2\" \"16*1\")))((= fnum 17) (yas/choose-value '(\"1*17\" \"2*9\" \"3*6\" \"4*5\" \"5*4\" \"6*3\" \"7*3\" \"8*3\" \"9*2\" \"10*2\" \"11*2\" \"12*2\" \"13*2\" \"14*2\" \"15*2\" \"16*2\" \"17*1\")))((= fnum 18) (yas/choose-value '(\"1*18\" \"2*9\" \"3*6\" \"4*5\" \"5*4\" \"6*3\" \"7*3\" \"8*3\" \"9*2\" \"10*2\" \"11*2\" \"12*2\" \"13*2\" \"14*2\" \"15*2\" \"16*2\" \"17*2\" \"18*1\")))((= fnum 19) (yas/choose-value '(\"1*19\" \"2*10\" \"3*7\" \"4*5\" \"5*4\" \"6*4\" \"7*3\" \"8*3\" \"9*3\" \"10*2\" \"11*2\" \"12*2\" \"13*2\" \"14*2\" \"15*2\" \"16*2\" \"17*2\" \"18*2\" \"19*1\")))((= fnum 20) (yas/choose-value '(\"1*20\" \"2*10\" \"3*7\" \"4*5\" \"5*4\" \"6*4\" \"7*3\" \"8*3\" \"9*3\" \"10*2\" \"11*2\" \"12*2\" \"13*2\" \"14*2\" \"15*2\" \"16*2\" \"17*2\" \"18*2\" \"19*2\" \"20*1\")))(t (insert \"COLNUM*ROWNUM\") (yas-text))))}\n%% Title text: ${4:${1:$(replace-regexp-in-string \"[_]+\" \" \" (replace-regexp-in-string \"[-]+\" \" \" (replace-regexp-in-string \"[.]\" \"\"  yas-text)))}}\n%% Figure width: ${5:3cm }\n%% Numbering: ${6:$$(yas/choose-value '(\"a\" \"\\\\(a\\\\)\" \"A\" \"\\\\(A\\\\)\" \"i\" \"\\\\(i\\\\)\" \"I\" \"\\\\(I\\\\)\" \"1\" \"\\\\(1\\\\)\" \"None\"))}\n%% Caption: ${7:$$(yas/choose-value '(\"numbered caption\" \"unnumbered caption\" \"no caption\"))}\n\\startplacefigure[location={$2${7:$(cond ((string-equal \"numbered caption\" yas-text) (concat \"\"))((string-equal \"unnumbered caption\" yas-text)(concat \",nonumber\"))((string-equal \"no caption\" yas-text)(concat \",none\")))}},title={$4},list={$4},reference={figure:${4:$(replace-regexp-in-string \" \" \"\" (replace-regexp-in-string \"_\" \"\" (replace-regexp-in-string \"-\" \"\" (replace-regexp-in-string \"[.]\" \"\" (capitalize yas-text)))))}}]\n  \\startcombination[$3]\n    ${6:$(let* ((mylist (list \"a\" \"b\" \"c\")) (fignums (number-sequence 1 100)) (alphalst (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\" \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\")) (romanlst (list \"i\" \"ii\" \"iii\" \"iv\" \"v\" \"vi\" \"vii\" \"viii\" \"ix\" \"x\" \"xi\" \"xii\" \"xiii\" \"xiv\" \"xv\" \"xvi\" \"xvii\" \"xviii\" \"xix\" \"xx\" \"xxi\" \"xxii\" \"xxiii\" \"xxiv\" \"xxv\" \"xxvi\" \"xxvii\" \"xxviii\" \"xxix\" \"xxx\")) (fdir (format \"%s/%s\" figures-dir (yas-field-value 1))) (fwidth (yas-field-value 5)) (fcol (append (directory-files fdir t \"^[^.]+[.]pdf$\")  (directory-files fdir t \"^[^.]+[.]PDF$\") (directory-files fdir t \"^[^.]+[.]mps$\") (directory-files fdir t \"^[^.]+[.]MPS$\") (directory-files fdir t \"^[^.]+[.]jpg$\") (directory-files fdir t \"^[^.]+[.]JPG$\") (directory-files fdir t \"^[^.]+[.]jpeg$\") (directory-files fdir t \"^[^.]+[.]JPEG$\") (directory-files fdir t \"^[^.]+[.]png$\") (directory-files fdir t \"^[^.]+[.]PNG$\") (directory-files fdir t \"^[^.]+[.]jp2$\") (directory-files fdir t \"^[^.]+[.]JP2$\") (directory-files fdir t \"^[^.]+[.]jbig$\") (directory-files fdir t \"^[^.]+[.]JBIG$\") (directory-files fdir t \"^[^.]+[.]jbig2$\") (directory-files fdir t \"^[^.]+[.]JBIG2$\") (directory-files fdir t \"^[^.]+[.]jb2$\") (directory-files fdir t \"^[^.]+[.]JB2$\") (directory-files fdir t \"^[^.]+[.]svg$\") (directory-files fdir t \"^[^.]+[.]SVG$\") (directory-files fdir t \"^[^.]+[.]svgz$\") (directory-files fdir t \"^[^.]+[.]SVGZ$\") (directory-files fdir t \"^[^.]+[.]eps$\") (directory-files fdir t \"^[^.]+[.]EPS$\") (directory-files fdir t \"^[^.]+[.]ai$\") (directory-files fdir t \"^[^.]+[.]AI$\") (directory-files fdir t \"^[^.]+[.]gif$\") (directory-files fdir t \"^[^.]+[.]GIF$\") (directory-files fdir t \"^[^.]+[.]tiff$\") (directory-files fdir t \"^[^.]+[.]TIFF$\")))) (mapconcat (function (lambda (x) (concat \"{\\\\\\externalfigure[\" (yas-field-value 1) \"/\" (file-name-nondirectory x) \"][width=\" fwidth \"]}{\" (cond ((string-equal (yas-field-value 6) \"a\") (pop alphalst))((string-equal (yas-field-value 6) \"(a)\") (concatenate 'string \"(\" (pop alphalst) \")\"))((string-equal (yas-field-value 6) \"A\") (upcase (pop alphalst)))((string-equal (yas-field-value 6) \"(A)\") (concatenate 'string \"(\" (upcase (pop alphalst)) \")\")) ((string-equal (yas-field-value 6) \"i\") (pop romanlst)) ((string-equal (yas-field-value 6) \"(i)\") (concatenate 'string \"(\" (pop romanlst) \")\")) ((string-equal (yas-field-value 6) \"I\") (upcase (pop romanlst))) ((string-equal (yas-field-value 6) \"(I)\") (concatenate 'string \"(\" (upcase (pop romanlst)) \")\")) ((string-equal (yas-field-value 6) \"(1)\") (concatenate 'string \"(\" (number-to-string (pop fignums)) \")\")) ((string-equal (yas-field-value 6) \"None\") (insert \"\" ))(t (number-to-string (pop fignums)))) \"}\"))) fcol \"\\n\\s\\s\\s\\s\"))}\n  \\stopcombination\n\\stopplacefigure\n%%%%% END OF COMBINATION %%%%%%%%%%%%%%%%%%%%%%%%\n$0" "Combination <-- directory files" nil
                        ("Graphics & Floats" "Figures")
                        ((figures-dir
                          (if
                              (boundp 'user-default-figures-dir)
                              (format "%s" user-default-figures-dir)
                            (concat "~")))
                         (yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/g_Graphics_and_floats/c_Figures/e_combination_using_directory_files.yasnippet" nil nil)
                       ("hmfg" "\\startplacefigure[location={${1:$$(yas/choose-value '(\"left\" \"right\" \"here\" \"top\" \"bottom\" \"inleft\" \"inright\" \"inmargin\" \"margin\" \"page\" \"opposite\" \"always\" \"force\"))}${5:$(cond ((string-equal \"numbered caption\" yas-text) (concat \"\"))((string-equal \"unnumbered caption\" yas-text)(concat \",nonumber\"))((string-equal \"no caption\" yas-text)(concat \",none\")))}},title={${4:${2:$(replace-regexp-in-string \"[_]+\" \" \" (replace-regexp-in-string \"[-]+\" \" \" (replace-regexp-in-string \"[.]+\" \"\" (replace-regexp-in-string \"\\.[A-Za-z0-9]+$\" \"\" yas-text))))}}},list={$4},reference={figure:${2:$(replace-regexp-in-string \"[-._]+\" \"\" (capitalize yas-text))}}] %% Use ${5:$$(yas/choose-value '(\"numbered caption\" \"unnumbered caption\" \"no caption\"))}\n  \\mirror{\\externalfigure[{${2:$$(if (boundp 'user-default-figures-dir)\n                               (let ((flist (append (directory-files user-default-figures-dir t \"^[^.]+[.]pdf$\")\n                                            (append (directory-files user-default-figures-dir t \"^[^.]+[.]PDF$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]mps$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]MPS$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]jpg$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]JPG$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]jpeg$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]JPEG$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]png$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]PNG$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]jp2$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]JP2$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]jbig$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]JBIG$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]jbig2$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]JBIG2$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]jb2$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]JB2$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]svg$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]SVG$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]svgz$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]SVGZ$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]eps$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]EPS$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]ai$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]AI$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]gif$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]GIF$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]tiff$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]TIFF$\")))))\n                                 (if (> (length flist)0)\n                                   (yas-choose-value (mapcar '(lambda (x) (file-name-nondirectory x)) flist))\n                                   (insert \"FILE\")(yas-text)))\n                               (insert \"FILE\")(yas-text))}}][width=${3:4cm}]}\n\\stopplacefigure\n$0" "Horizontal mirrored figure" nil
                        ("Graphics & Floats" "Figures")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/g_Graphics_and_floats/c_Figures/d_horizontal_mirrored_figure.yasnippet" nil nil)
                       ("vmfg" "\\startplacefigure[location={${1:$$(yas/choose-value '(\"left\" \"right\" \"here\" \"top\" \"bottom\" \"inleft\" \"inright\" \"inmargin\" \"margin\" \"page\" \"opposite\" \"always\" \"force\"))}${5:$(cond ((string-equal \"numbered caption\" yas-text) (concat \"\"))((string-equal \"unnumbered caption\" yas-text)(concat \",nonumber\"))((string-equal \"no caption\" yas-text)(concat \",none\")))}},title={${4:${2:$(replace-regexp-in-string \"[_]+\" \" \" (replace-regexp-in-string \"[-]+\" \" \" (replace-regexp-in-string \"[.]+\" \"\" (replace-regexp-in-string \"\\.[A-Za-z0-9]+$\" \"\" yas-text))))}}},list={$4},reference={figure:${2:$(replace-regexp-in-string \"[-._]+\" \"\" (capitalize yas-text))}}] %% Use ${5:$$(yas/choose-value '(\"numbered caption\" \"unnumbered caption\" \"no caption\"))}\n  \\rotate[rotation=180]{\\mirror{\\externalfigure[{${2:$$(if (boundp 'user-default-figures-dir)\n                               (let ((flist (append (directory-files user-default-figures-dir t \"^[^.]+[.]pdf$\")\n                                            (append (directory-files user-default-figures-dir t \"^[^.]+[.]PDF$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]mps$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]MPS$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]jpg$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]JPG$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]jpeg$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]JPEG$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]png$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]PNG$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]jp2$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]JP2$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]jbig$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]JBIG$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]jbig2$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]JBIG2$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]jb2$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]JB2$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]svg$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]SVG$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]svgz$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]SVGZ$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]eps$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]EPS$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]ai$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]AI$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]gif$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]GIF$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]tiff$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]TIFF$\")))))\n                                 (if (> (length flist)0)\n                                   (yas-choose-value (mapcar '(lambda (x) (file-name-nondirectory x)) flist))\n                                   (insert \"FILE\")(yas-text)))\n                               (insert \"FILE\")(yas-text))}}][width=${3:4cm}]}}\n\\stopplacefigure\n$0" "Vertical mirrored figure" nil
                        ("Graphics & Floats" "Figures")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/g_Graphics_and_floats/c_Figures/c_vertical_mirrored_figure.yasnippet" nil nil)
                       ("rfg" "\\startplacefigure[location={${1:$$(yas/choose-value '(\"left\" \"right\" \"here\" \"top\" \"bottom\" \"inleft\" \"inright\" \"inmargin\" \"margin\" \"page\" \"opposite\" \"always\" \"force\"))}${5:$(cond ((string-equal \"numbered caption\" yas-text) (concat \"\"))((string-equal \"unnumbered caption\" yas-text)(concat \",nonumber\"))((string-equal \"no caption\" yas-text)(concat \",none\")))}},title={${4:${2:$(replace-regexp-in-string \"[_]+\" \" \" (replace-regexp-in-string \"[-]+\" \" \" (replace-regexp-in-string \"[.]+\" \"\" (replace-regexp-in-string \"\\.[A-Za-z0-9]+$\" \"\" yas-text))))}}},list={$4},reference={figure:${2:$(replace-regexp-in-string \"[-._]+\" \"\" (capitalize yas-text))}}] %% Use ${5:$$(yas/choose-value '(\"numbered caption\" \"unnumbered caption\" \"no caption\"))}\n  \\rotate[rotation=-${6:NUMBER 0-360}]{\\externalfigure[{${2:$$(if (boundp 'user-default-figures-dir)\n                               (let ((flist (append (directory-files user-default-figures-dir t \"^[^.]+[.]pdf$\")\n                                            (append (directory-files user-default-figures-dir t \"^[^.]+[.]PDF$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]mps$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]MPS$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]jpg$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]JPG$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]jpeg$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]JPEG$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]png$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]PNG$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]jp2$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]JP2$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]jbig$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]JBIG$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]jbig2$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]JBIG2$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]jb2$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]JB2$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]svg$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]SVG$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]svgz$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]SVGZ$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]eps$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]EPS$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]ai$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]AI$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]gif$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]GIF$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]tiff$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]TIFF$\")))))\n                                 (if (> (length flist)0)\n                                   (yas-choose-value (mapcar '(lambda (x) (file-name-nondirectory x)) flist))\n                                   (insert \"FILE\")(yas-text)))\n                               (insert \"FILE\")(yas-text))}}][width=${3:4cm}]}\n\\stopplacefigure\n$0" "Rotated figure" nil
                        ("Graphics & Floats" "Figures")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/g_Graphics_and_floats/c_Figures/b_rotated_figure.yasnippet" nil nil)
                       ("fg" "\\startplacefigure[location={${1:$$(yas/choose-value '(\"left\" \"right\" \"here\" \"top\" \"bottom\" \"inleft\" \"inright\" \"inmargin\" \"margin\" \"page\" \"opposite\" \"always\" \"force\"))}${5:$(cond ((string-equal \"numbered caption\" yas-text) (concat \"\"))((string-equal \"unnumbered caption\" yas-text)(concat \",nonumber\"))((string-equal \"no caption\" yas-text)(concat \",none\")))}},title={${4:${2:$(replace-regexp-in-string \"[_]+\" \" \" (replace-regexp-in-string \"[-]+\" \" \" (replace-regexp-in-string \"[.]+\" \"\" (replace-regexp-in-string \"\\.[A-Za-z0-9]+$\" \"\" yas-text))))}}},list={$4},reference={figure:${2:$(replace-regexp-in-string \"[-._]+\" \"\" (capitalize yas-text))}}] %% Use ${5:$$(yas/choose-value '(\"numbered caption\" \"unnumbered caption\" \"no caption\"))}\n  \\externalfigure[{${2:$$(if (boundp 'user-default-figures-dir)\n                               (let ((flist (append (directory-files user-default-figures-dir t \"^[^.]+[.]pdf$\")\n                                            (append (directory-files user-default-figures-dir t \"^[^.]+[.]PDF$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]mps$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]MPS$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]jpg$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]JPG$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]jpeg$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]JPEG$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]png$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]PNG$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]jp2$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]JP2$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]jbig$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]JBIG$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]jbig2$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]JBIG2$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]jb2$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]JB2$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]svg$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]SVG$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]svgz$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]SVGZ$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]eps$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]EPS$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]ai$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]AI$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]gif$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]GIF$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]tiff$\")\n                                                    (directory-files user-default-figures-dir t \"^[^.]+[.]TIFF$\")))))\n                                 (if (> (length flist)0)\n                                   (yas-choose-value (mapcar '(lambda (x) (file-name-nondirectory x)) flist))\n                                   (insert \"FILE\")(yas-text)))\n                               (insert \"FILE\")(yas-text))}}][width=${3:4cm}]\n\\stopplacefigure\n$0\n" "Figure" nil
                        ("Graphics & Floats" "Figures")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/g_Graphics_and_floats/c_Figures/a_figure.yasnippet" nil nil)))


;;; Snippet definitions:
;;;
(yas-define-snippets 'context-mode
                     '(("tblenv" "%%%%% TABLE CONFIGURATION %%%%%%%%%%%%%%%%%%%%%%%\n%% Name: ${1:IDENTIFIER}\n%% Style: ${2:$$(yas/choose-value '(\"Default\" \"Empty\" \"Booktabs\"))}\n\\startsetups[$1]\n${2:$(cond ((string-equal \"Default\" yas-text)(concat \"\\\\\\setupTABLE[frame=on]\"))((string-equal \"Empty\" yas-text)(concat \"\\\\\\setupTABLE[frame=off]\"))((string-equal \"Booktabs\" yas-text)(concat \"\\\\\\setupTABLE[frame=off]\\n\\\\\\setupTABLE[r][first][topframe=on,rulethickness=2pt]\\n\\\\\\setupTABLE[r][last][bottomframe=on,rulethickness=2pt]\\n\\\\\\setupTABLE[r][2][topframe=on,rulethickness=1pt]\\n\\\\\\setupTABLE[r][first][style={\\\\\\tf\\\\\\bf}]\\n\\\\\\setupTABLE[r][each][align={middle,lohi}]\")))}\n\\stopsetups\n%%%%% END OF CONFIGURATION %%%%%%%%%%%%%%%%%%%%%%\n$0" "Table setups environment" nil
                        ("Graphics & Floats" "Tables")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/g_Graphics_and_floats/d_Tables/b_table_setups_environment.yasnippet" nil nil)
                       (nil "\\startplacetable[location={${1:$$(yas/choose-value '(\"left\" \"right\" \"here\" \"top\" \"bottom\" \"inleft\" \"inright\" \"inmargin\" \"margin\" \"page\" \"opposite\" \"always\" \"force\"))}${3:$(cond ((string-equal \"numbered caption\" yas-text) (concat \"\"))((string-equal \"unnumbered caption\" yas-text)(concat \",nonumber\"))((string-equal \"no caption\" yas-text)(concat \",none\")))}},title={${2:TITLE TEXT}},list={$2},reference={table:${2:$(replace-regexp-in-string \"[ ]+\" \"\" (capitalize (replace-regexp-in-string \"[^[:nonascii:]a-z0-9A-Z]\" \" \" yas-text)))}}] %% Use ${3:$$(yas/choose-value '(\"numbered caption\" \"unnumbered caption\" \"no caption\"))}\n  \\bTABLE[setups=${4:IDENTIFIER}]\n    `(replace-regexp-in-string \"[\\\\]+\" \"\\\\\\\\\" (replace-regexp-in-string \"~\" \"\\\\\\\\textasciitilde \"\n(replace-regexp-in-string \"#\" \"\\\\\\\\#\"\n(replace-regexp-in-string \"&\" \"\\\\\\\\&\"\n(replace-regexp-in-string \"|\" \"\\\\\\\\textbar \"\n(replace-regexp-in-string \"%\" \"\\\\\\\\percent \"\n(replace-regexp-in-string \"\\\\(%\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\percent\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(|\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textbar\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(~\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textasciitilde\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([\\$]\\\\)\\\\([[:nonascii:]A-Za-z0-9]+\\\\)\" \"\\\\\\\\textdollar \"\n(replace-regexp-in-string \"\\\\([^a-zA-Z#&|]\\\\)\\\\([\\\\]+\\\\)\\\\([^a-zA-Z#&|]\\\\)\" \"\\\\\\\\letterbackslash\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quotation{\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([»\\\"“„”]\\\\)\" \"}\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quote{\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹\\'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([›\\'‘‚’]\\\\)\" \"}\"\n(replace-regexp-in-string \"\\n\" \"\\n\\s\\s\\s\\s\"\n(replace-regexp-in-string \"\\\\(\\s\\s\\\\)\" \" \\\\\\\\eTD\\\\\\\\bTD \"\n(replace-regexp-in-string \"^\" \"\\\\\\\\bTR\\\\\\\\bTD \"\n(replace-regexp-in-string \"$\" \" \\\\\\\\eTD\\\\\\\\eTR\"\n(replace-regexp-in-string \"[\\n][\\s]*$\" \"\"\n(yas-selected-text)))))) nil nil 4) nil nil 2) nil nil 3) nil nil 1) nil nil 2) nil nil 1) nil nil 1) nil nil 1) nil nil 1)))))))`\n  \\eTABLE\n\\stopplacetable\n$0" "Region text as table [sep: \\s\\s \\n]" nil
                            ("Graphics & Floats" "Tables")
                            ((yas/indent-line 'fixed)
                             (yas/wrap-around-region 'nil))
                            "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/g_Graphics_and_floats/d_Tables/a_region_text_as_table.yasnippet" "C-c t b l" nil)))


;;; Snippet definitions:
;;;
(yas-define-snippets 'context-mode
                     '((nil "\\startplacepullquote[location={right},title={${1:TITLE}},reference={pullquote:${1:$(replace-regexp-in-string \"[ ]+\" \"\" (capitalize (replace-regexp-in-string \"[^a-z0-9A-Z]\" \" \" yas-text)))}}]\n  \\startpulltext\n    `(replace-regexp-in-string \"~\" \"\\\\\\\\textasciitilde \"\n(replace-regexp-in-string \"#\" \"\\\\\\\\#\"\n(replace-regexp-in-string \"&\" \"\\\\\\\\&\"\n(replace-regexp-in-string \"|\" \"\\\\\\\\textbar \"\n(replace-regexp-in-string \"%\" \"\\\\\\\\percent \"\n(replace-regexp-in-string \"\\\\(%\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\percent\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(|\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textbar\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(~\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textasciitilde\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([\\$]\\\\)\\\\([[:nonascii:]A-Za-z0-9]+\\\\)\" \"\\\\\\\\textdollar \"\n(replace-regexp-in-string \"\\\\([^a-zA-Z#&|]\\\\)\\\\([\\\\]+\\\\)\\\\([^a-zA-Z#&|]\\\\)\" \"\\\\\\\\letterbackslash\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quotation{\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([»\\\"“„”]\\\\)\" \"}\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quote{\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹\\'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([›\\'‘‚’]\\\\)\" \"}\"\n(yas-selected-text) nil nil 4) nil nil 2) nil nil 3) nil nil 1) nil nil 2) nil nil 1) nil nil 1) nil nil 1) nil nil 1 ))))))`\n  \\stoppulltext\n\\stopplacepullquote\n$0" "Region as pull quote" nil
                            ("Typography" "Quotation")
                            ((yas/indent-line 'fixed)
                             (yas/wrap-around-region 'nil))
                            "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/h_Typography/a_Quotation/k_region_as_pull_quote.yasnippet" "C-c p q t" nil)
                       (nil "\\quotation{`(replace-regexp-in-string \"~\" \"\\\\\\\\textasciitilde \"\n(replace-regexp-in-string \"#\" \"\\\\\\\\#\"\n(replace-regexp-in-string \"&\" \"\\\\\\\\&\"\n(replace-regexp-in-string \"|\" \"\\\\\\\\textbar \"\n(replace-regexp-in-string \"%\" \"\\\\\\\\percent \"\n(replace-regexp-in-string \"\\\\(%\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\percent\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(|\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textbar\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(~\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textasciitilde\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([\\$]\\\\)\\\\([[:nonascii:]A-Za-z0-9]+\\\\)\" \"\\\\\\\\textdollar \"\n(replace-regexp-in-string \"\\\\([^a-zA-Z#&|]\\\\)\\\\([\\\\]+\\\\)\\\\([^a-zA-Z#&|]\\\\)\" \"\\\\\\\\letterbackslash\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quotation{\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([»\\\"“„”]\\\\)\" \"}\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quote{\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹\\'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([›\\'‘‚’]\\\\)\" \"}\"\n(yas-selected-text) nil nil 4) nil nil 2) nil nil 3) nil nil 1) nil nil 2) nil nil 1) nil nil 1) nil nil 1) nil nil 1 ))))))`}$0" "Region in double quotes" nil
                            ("Typography" "Quotation")
                            ((yas/indent-line 'fixed)
                             (yas/wrap-around-region 'nil))
                            "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/h_Typography/a_Quotation/j_region_in_double_quotes.yasnippet" "C-c d q t" nil)
                       (nil "\\quote{`(replace-regexp-in-string \"~\" \"\\\\\\\\textasciitilde \"\n(replace-regexp-in-string \"#\" \"\\\\\\\\#\"\n(replace-regexp-in-string \"&\" \"\\\\\\\\&\"\n(replace-regexp-in-string \"|\" \"\\\\\\\\textbar \"\n(replace-regexp-in-string \"%\" \"\\\\\\\\percent \"\n(replace-regexp-in-string \"\\\\(%\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\percent\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(|\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textbar\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(~\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textasciitilde\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([\\$]\\\\)\\\\([[:nonascii:]A-Za-z0-9]+\\\\)\" \"\\\\\\\\textdollar \"\n(replace-regexp-in-string \"\\\\([^a-zA-Z#&|]\\\\)\\\\([\\\\]+\\\\)\\\\([^a-zA-Z#&|]\\\\)\" \"\\\\\\\\letterbackslash\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quotation{\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([»\\\"“„”]\\\\)\" \"}\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quote{\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹\\'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([›\\'‘‚’]\\\\)\" \"}\"\n(yas-selected-text) nil nil 4) nil nil 2) nil nil 3) nil nil 1) nil nil 2) nil nil 1) nil nil 1) nil nil 1) nil nil 1 ))))))`}$0" "Region in single quotes" nil
                            ("Typography" "Quotation")
                            ((yas/indent-line 'fixed)
                             (yas/wrap-around-region 'nil))
                            "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/h_Typography/a_Quotation/i_region_in_single_quotes.yasnippet" "C-c s q t" nil)
                       ("actdt" "%%%%% DELIMITED TEXT ACTIVATION %%%%%%%%%%%%%%%%%\n%% Name: ${1:IDENTIFIER} (Usage: \\start$1 TEXT \\stop$1)\n%% Font Style: ${2:$$(yas/choose-value '(\"No style\" \"Serif\" \"Sans serif\" \"Teletype\"))}\n%% Font Size: ${3:$$(yas/choose-value '(\"xx - text scaled at 0.6\" \"x - text scaled at 0.8\" \"typeface - text scaled at 1\" \"a - text scaled at 1.2\" \"b - text scaled at 1.44\" \"c - text scaled at 1.72\" \"d - text scaled at 2.07\"))}\n%% Font Alternative: ${4:$$(yas/choose-value '(\"Normal\" \"Bold\" \"Italic\" \"Slanted\" \"Bold Italic\" \"Bold Slanted\" \"Smallcaps\"))}\n%% Text Color: ${5:$$(yas/choose-value '(\"black\" \"blue\" \"cyan\" \"darkblue\" \"darkcyan\" \"darkgray\" \"darkgreen\" \"darkmagenta\" \"darkred\" \"darkyellow\" \"gray\" \"green\" \"lightblue\" \"lightgray\" \"lightgreen\" \"lightred\" \"magenta\" \"middleblue\" \"middlecyan\" \"middlegray\" \"middlegreen\" \"middlemagenta\" \"middlered\" \"middleyellow\" \"orange\" \"red\" \"white\" \"yellow\"))}\n%% Left Quotation Mark: ${6:$$(yas/choose-value '(\"None\" \"Double\" \"Single\" \"Double Angle\" \"Single Angle\" \"Inwards Double Angle\" \"Inwards Single Angle\" \"Lower Double Nine\" \"Lower Single Nine\" \"Upper Double Nine\" \"Upper Single Nine\" \"Upper Double Six\" \"Upper Single Six\"))}\n%% Right Quotation Mark: ${7:$$(yas/choose-value '(\"None\" \"Double\" \"Single\" \"Double Angle\" \"Single Angle\" \"Inwards Double Angle\" \"Inwards Single Angle\" \"Lower Double Nine\" \"Lower Single Nine\" \"Upper Double Nine\" \"Upper Single Nine\" \"Upper Double Six\" \"Upper Single Six\"))}\n%% Interline Spacing: ${8:$$(yas/choose-value '(\"small\" \"medium\" \"big\" \"2.0ex\" \"2.1ex\" \"2.2ex\" \"2.3ex\" \"2.3ex\" \"2.4ex\" \"2.5ex\" \"2.6ex\" \"2.7ex\" \"2.8ex - default space\" \"2.9ex\" \"3.0ex\" \"3.1ex\" \"3.2ex\" \"3.3ex\" \"3.4ex\" \"3.5ex\" \"3.6ex\" \"3.7ex\" \"3.8ex\" \"3.9ex\" \"4.0ex\"))}\n%% Distance To Left Margin: ${9:$$(yas/choose-value '(\"No distance\" \"Inherit distance from quotation command\" \"1 em\" \"2 em\" \"3 em\" \"4 em\" \"5 em\" \"6 em\" \"7 em\" \"8 em\" \"9 em\" \"10 em\" \"11 em\" \"12 em\" \"13 em\" \"14 em\" \"15 em\" \"16 em\" \"17 em\" \"18 em\" \"19 em\" \"20 em\" \"21 em\" \"22 em\" \"23 em\" \"24 em\" \"25 em\" \"05 pst of text width\" \"10 pst of text width\" \"15 pst of text width\" \"20 pst of text width\" \"25 pst of text width\" \"30 pst of text width\" \"35 pst of text width\" \"40 pst of text width\" \"45 pst of text width\" \"50 pst of text width\" \"55 pst of text width\" \"60 pst of text width\" \"65 pst of text width\" \"70 pst of text width\" \"75 pst of text width\" \"80 pst of text width\" \"85 pst of text width\" \"90 pst of text width\" \"95 pst of text width\"))}\n%% Distance To Right Margin: ${10:$$(yas/choose-value '(\"No distance\" \"Inherit distance from quotation command\" \"1 em\" \"2 em\" \"3 em\" \"4 em\" \"5 em\" \"6 em\" \"7 em\" \"8 em\" \"9 em\" \"10 em\" \"11 em\" \"12 em\" \"13 em\" \"14 em\" \"15 em\" \"16 em\" \"17 em\" \"18 em\" \"19 em\" \"20 em\" \"21 em\" \"22 em\" \"23 em\" \"24 em\" \"25 em\" \"05 pst of text width\" \"10 pst of text width\" \"15 pst of text width\" \"20 pst of text width\" \"25 pst of text width\" \"30 pst of text width\" \"35 pst of text width\" \"40 pst of text width\" \"45 pst of text width\" \"50 pst of text width\" \"55 pst of text width\" \"60 pst of text width\" \"65 pst of text width\" \"70 pst of text width\" \"75 pst of text width\" \"80 pst of text width\" \"85 pst of text width\" \"90 pst of text width\" \"95 pst of text width\"))}\n%% Empty Space Before Quotation: ${11:$$(yas/choose-value '(\"No space\" \"1 ex\" \"2 ex\" \"3 ex\" \"4 ex\" \"5 ex\" \"6 ex\" \"7 ex\" \"8 ex\" \"9 ex\" \"10 ex\" \"11 ex\" \"12 ex\" \"13 ex\" \"14 ex\" \"15 ex\" \"16 ex\" \"17 ex\" \"18 ex\" \"19 ex\" \"20 ex\"))}\n%% Empty Space Before Quotation: ${12:$$(yas/choose-value '(\"No space\" \"1 ex\" \"2 ex\" \"3 ex\" \"4 ex\" \"5 ex\" \"6 ex\" \"7 ex\" \"8 ex\" \"9 ex\" \"10 ex\" \"11 ex\" \"12 ex\" \"13 ex\" \"14 ex\" \"15 ex\" \"16 ex\" \"17 ex\" \"18 ex\" \"19 ex\" \"20 ex\"))}\n\\definedelimitedtext\n  [$1]\n  [style={\\\\${2:$(cond ((string-equal \"No style\" yas-text) (concat \"tf\"))((string-equal \"Serif\" yas-text) (concat \"rm\"))((string-equal \"Sans serif\" yas-text) (concat \"ss\"))((string-equal \"Teletype\" yas-text) (concat \"tt\")))}${3:$(cond ((string-equal \"xx - text scaled at 0.6\" yas-text) (concat \"xx\"))((string-equal \"x - text scaled at 0.8\" yas-text) (concat \"x\"))((string-equal \"a - text scaled at 1.2\" yas-text) (concat \"a\"))((string-equal \"b - text scaled at 1.44\" yas-text) (concat \"b\"))((string-equal \"c - text scaled at 1.72\" yas-text) (concat \"c\"))((string-equal \"d - text scaled at 2.07\" yas-text) (concat \"d\")))}${4:$(cond ((string-equal \"Bold\" yas-text) (concat \"\\\\\\bf\"))((string-equal \"Italic\" yas-text) (concat \"\\\\\\it\"))((string-equal \"Slanted\" yas-text) (concat \"\\\\\\sl\"))((string-equal \"Bold Italic\" yas-text) (concat \"\\\\\\bi\"))((string-equal \"Bold Slanted\" yas-text) (concat \"\\\\\\bs\"))((string-equal \"Smallcaps\" yas-text) (concat \"\\\\\\sc\")))}},\n   color=$5,\n   left={${6:$(cond ((string-equal \"None\" yas-text) (concat \"\"))((string-equal \"Double\" yas-text) (concat \"\\\\\\symbol[leftquotation]\"))((string-equal \"Single\" yas-text) (concat \"\\\\\\symbol[leftquote]\"))((string-equal \"Double Angle\" yas-text) (concat \"\\\\\\leftguillemot\"))((string-equal \"Single Angle\" yas-text) (concat \"‹\"))((string-equal \"Inwards Double Angle\" yas-text) (concat \"\\\\\\rightguillemot\"))((string-equal \"Inwards Single Angle\" yas-text) (concat \"›\"))((string-equal \"Lower Double Nine\" yas-text) (concat \"\\\\\\lowerleftdoubleninequote\"))((string-equal \"Upper Double Nine\" yas-text) (concat \"\\\\\\upperleftdoubleninequote\"))((string-equal \"Lower Single Nine\" yas-text) (concat \"\\\\\\lowerleftsingleninequote\"))((string-equal \"Upper Single Nine\" yas-text) (concat \"\\\\\\upperleftsingleninequote\"))((string-equal \"Upper Double Six\" yas-text) (concat \"\\\\\\upperleftdoublesixquote\"))((string-equal \"Upper Single Six\" yas-text) (concat \"\\\\\\upperleftsinglesixquote\")))}},\n   right={${7:$(cond ((string-equal \"None\" yas-text) (concat \"\")) ((string-equal \"Double\" yas-text) (concat \"\\\\\\symbol[rightquotation]\"))((string-equal \"Single\" yas-text) (concat \"\\\\\\symbol[rightquote]\"))((string-equal \"Double Angle\" yas-text) (concat \"\\\\\\rightguillemot\"))((string-equal \"Single Angle\" yas-text) (concat \"›\"))((string-equal \"Inwards Double Angle\" yas-text) (concat \"\\\\\\leftguillemot\"))((string-equal \"Inwards Single Angle\" yas-text) (concat \"‹\"))((string-equal \"Lower Double Nine\" yas-text) (concat \"\\\\\\lowerrightdoubleninequote\"))((string-equal \"Upper Double Nine\" yas-text) (concat \"\\\\\\upperrightdoubleninequote\"))((string-equal \"Lower Single Nine\" yas-text) (concat \"\\\\\\lowerrightsingleninequote\"))((string-equal \"Upper Single Nine\" yas-text) (concat \"\\\\\\upperrightsingleninequote\"))((string-equal \"Upper Double Six\" yas-text) (concat \"\\\\\\upperrightdoublesixquote\"))((string-equal \"Upper Single Six\" yas-text) (concat \"\\\\\\upperrightsinglesixquote\")))}},\n   before={\\setupinterlinespace[${8:$(cond ((string-equal \"small\" yas-text) (concat \"small\"))((string-equal \"medium\" yas-text) (concat \"medium\"))((string-equal \"big\" yas-text) (concat \"big\"))((string-equal \"2.0ex\" yas-text) (concat \"line=2.0ex\"))((string-equal \"2.1ex\" yas-text) (concat \"line=2.1ex\"))((string-equal \"2.2ex\" yas-text) (concat \"line=2.2ex\"))((string-equal \"2.3ex\" yas-text) (concat \"line=2.3ex\"))((string-equal \"2.4ex\" yas-text) (concat \"line=2.4ex\"))((string-equal \"2.5ex\" yas-text) (concat \"line=2.5ex\"))((string-equal \"2.6ex\" yas-text) (concat \"line=2.6ex\"))((string-equal \"2.7ex\" yas-text) (concat \"line=2.7ex\"))((string-equal \"2.8ex - default space\" yas-text) (concat \"line=2.8ex\"))((string-equal \"2.9ex\" yas-text) (concat \"line=2.9ex\"))((string-equal \"3.0ex\" yas-text) (concat \"line=3.0ex\"))((string-equal \"3.1ex\" yas-text) (concat \"line=3.1ex\"))((string-equal \"3.2ex\" yas-text) (concat \"line=3.2ex\"))((string-equal \"3.3ex\" yas-text) (concat \"line=3.3ex\"))((string-equal \"3.4ex\" yas-text) (concat \"line=3.4ex\"))((string-equal \"3.5ex\" yas-text) (concat \"line=3.5ex\"))((string-equal \"3.6ex\" yas-text) (concat \"line=3.6ex\"))((string-equal \"3.7ex\" yas-text) (concat \"line=3.7ex\"))((string-equal \"3.8ex\" yas-text) (concat \"line=3.8ex\"))((string-equal \"3.9ex\" yas-text) (concat \"line=3.9ex\"))((string-equal \"4.0ex\" yas-text) (concat \"line=4.0ex\"))) \\setupalign[hz, hanging, nothyphenated]}]},\n   leftmargin=${9:$(cond ((string-equal \"No distance\" yas-text) (concat \"0em\"))((string-equal \"Inherit distance from quotation command\" yas-text)(concat \"{\\\\\\leftmargindistance}\"))((string-equal \"1 em\" yas-text) (concat \"1em\"))((string-equal \"2 em\" yas-text) (concat \"2em\"))((string-equal \"3 em\" yas-text) (concat \"3em\"))((string-equal \"4 em\" yas-text) (concat \"4em\"))((string-equal \"5 em\" yas-text) (concat \"5em\"))((string-equal \"6 em\" yas-text) (concat \"6em\"))((string-equal \"7 em\" yas-text) (concat \"7em\"))((string-equal \"8 em\" yas-text) (concat \"8em\"))((string-equal \"9 em\" yas-text) (concat \"9em\"))((string-equal \"10 em\" yas-text) (concat \"10em\"))((string-equal \"11 em\" yas-text) (concat \"11em\"))((string-equal \"12 em\" yas-text) (concat \"12em\"))((string-equal \"13 em\" yas-text) (concat \"13em\"))((string-equal \"14 em\" yas-text) (concat \"14em\"))((string-equal \"15 em\" yas-text) (concat \"15em\"))((string-equal \"16 em\" yas-text) (concat \"16em\"))((string-equal \"17 em\" yas-text) (concat \"17em\"))((string-equal \"18 em\" yas-text) (concat \"18em\"))((string-equal \"19 em\" yas-text) (concat \"19em\"))((string-equal \"20 em\" yas-text) (concat \"20em\"))((string-equal \"21 em\" yas-text) (concat \"21em\"))((string-equal \"22 em\" yas-text) (concat \"22em\"))((string-equal \"23 em\" yas-text) (concat \"23em\"))((string-equal \"24 em\" yas-text) (concat \"24em\"))((string-equal \"25 em\" yas-text) (concat \"25em\"))((string-equal \"05 pst of text width\" yas-text) (concat \"{0.05\\\\\\textwidth}\"))((string-equal \"10 pst of text width\" yas-text) (concat \"{0.10\\\\\\textwidth}\"))((string-equal \"15 pst of text width\" yas-text) (concat \"{0.15\\\\\\textwidth}\"))((string-equal \"20 pst of text width\" yas-text) (concat \"{0.20\\\\\\textwidth}\"))((string-equal \"25 pst of text width\" yas-text) (concat \"{0.25\\\\\\textwidth}\"))((string-equal \"30 pst of text width\" yas-text) (concat \"{0.30\\\\\\textwidth}\"))((string-equal \"35 pst of text width\" yas-text) (concat \"{0.35\\\\\\textwidth}\"))((string-equal \"40 pst of text width\" yas-text) (concat \"{0.40\\\\\\textwidth}\"))((string-equal \"45 pst of text width\" yas-text) (concat \"{0.45\\\\\\textwidth}\"))((string-equal \"50 pst of text width\" yas-text) (concat \"{0.50\\\\\\textwidth}\"))((string-equal \"55 pst of text width\" yas-text) (concat \"{0.55\\\\\\textwidth}\"))((string-equal \"60 pst of text width\" yas-text) (concat \"{0.60\\\\\\textwidth}\"))((string-equal \"65 pst of text width\" yas-text) (concat \"{0.65\\\\\\textwidth}\"))((string-equal \"70 pst of text width\" yas-text) (concat \"{0.70\\\\\\textwidth}\"))((string-equal \"75 pst of text width\" yas-text) (concat \"{0.75\\\\\\textwidth}\"))((string-equal \"80 pst of text width\" yas-text) (concat \"{0.80\\\\\\textwidth}\"))((string-equal \"85 pst of text width\" yas-text) (concat \"{0.85\\\\\\textwidth}\"))((string-equal \"90 pst of text width\" yas-text) (concat \"{0.90\\\\\\textwidth}\"))((string-equal \"95 pst of text width\" yas-text) (concat \"{0.95\\\\\\textwidth}\")))},\n   rightmargin=${10:$(cond ((string-equal \"No distance\" yas-text) (concat \"0em\"))((string-equal \"Inherit distance from quotation command\" yas-text) (concat \"{\\\\\\rightmargindistance}\"))((string-equal \"1 em\" yas-text) (concat \"1em\"))((string-equal \"2 em\" yas-text) (concat \"2em\"))((string-equal \"3 em\" yas-text) (concat \"3em\"))((string-equal \"4 em\" yas-text) (concat \"4em\"))((string-equal \"5 em\" yas-text) (concat \"5em\"))((string-equal \"6 em\" yas-text) (concat \"6em\"))((string-equal \"7 em\" yas-text) (concat \"7em\"))((string-equal \"8 em\" yas-text) (concat \"8em\"))((string-equal \"9 em\" yas-text) (concat \"9em\"))((string-equal \"10 em\" yas-text) (concat \"10em\"))((string-equal \"11 em\" yas-text) (concat \"11em\"))((string-equal \"12 em\" yas-text) (concat \"12em\"))((string-equal \"13 em\" yas-text) (concat \"13em\"))((string-equal \"14 em\" yas-text) (concat \"14em\"))((string-equal \"15 em\" yas-text) (concat \"15em\"))((string-equal \"16 em\" yas-text) (concat \"16em\"))((string-equal \"17 em\" yas-text) (concat \"17em\"))((string-equal \"18 em\" yas-text) (concat \"18em\"))((string-equal \"19 em\" yas-text) (concat \"19em\"))((string-equal \"20 em\" yas-text) (concat \"20em\"))((string-equal \"21 em\" yas-text) (concat \"21em\"))((string-equal \"22 em\" yas-text) (concat \"22em\"))((string-equal \"23 em\" yas-text) (concat \"23em\"))((string-equal \"24 em\" yas-text) (concat \"24em\"))((string-equal \"25 em\" yas-text) (concat \"25em\"))((string-equal \"05 pst of text width\" yas-text) (concat \"{0.05\\\\\\textwidth}\"))((string-equal \"10 pst of text width\" yas-text) (concat \"{0.10\\\\\\textwidth}\"))((string-equal \"15 pst of text width\" yas-text) (concat \"{0.15\\\\\\textwidth}\"))((string-equal \"20 pst of text width\" yas-text) (concat \"{0.20\\\\\\textwidth}\"))((string-equal \"25 pst of text width\" yas-text) (concat \"{0.25\\\\\\textwidth}\"))((string-equal \"30 pst of text width\" yas-text) (concat \"{0.30\\\\\\textwidth}\"))((string-equal \"35 pst of text width\" yas-text) (concat \"{0.35\\\\\\textwidth}\"))((string-equal \"40 pst of text width\" yas-text) (concat \"{0.40\\\\\\textwidth}\"))((string-equal \"45 pst of text width\" yas-text) (concat \"{0.45\\\\\\textwidth}\"))((string-equal \"50 pst of text width\" yas-text) (concat \"{0.50\\\\\\textwidth}\"))((string-equal \"55 pst of text width\" yas-text) (concat \"{0.55\\\\\\textwidth}\"))((string-equal \"60 pst of text width\" yas-text) (concat \"{0.60\\\\\\textwidth}\"))((string-equal \"65 pst of text width\" yas-text) (concat \"{0.65\\\\\\textwidth}\"))((string-equal \"70 pst of text width\" yas-text) (concat \"{0.70\\\\\\textwidth}\"))((string-equal \"75 pst of text width\" yas-text) (concat \"{0.75\\\\\\textwidth}\"))((string-equal \"80 pst of text width\" yas-text) (concat \"{0.80\\\\\\textwidth}\"))((string-equal \"85 pst of text width\" yas-text) (concat \"{0.85\\\\\\textwidth}\"))((string-equal \"90 pst of text width\" yas-text) (concat \"{0.90\\\\\\textwidth}\"))((string-equal \"95 pst of text width\" yas-text) (concat \"{0.95\\\\\\textwidth}\")))},\n   spacebefore=${11:$(cond ((string-equal \"No space\" yas-text) (concat \"0ex\"))((string-equal \"1 ex\" yas-text) (concat \"1ex\"))((string-equal \"2 ex\" yas-text) (concat \"2ex\"))((string-equal \"3 ex\" yas-text) (concat \"3ex\"))((string-equal \"4 ex\" yas-text) (concat \"4ex\"))((string-equal \"5 ex\" yas-text) (concat \"5ex\"))((string-equal \"6 ex\" yas-text) (concat \"6ex\"))((string-equal \"7 ex\" yas-text) (concat \"7ex\"))((string-equal \"8 ex\" yas-text) (concat \"8ex\"))((string-equal \"9 ex\" yas-text) (concat \"9ex\"))((string-equal \"10 ex\" yas-text) (concat \"10ex\"))((string-equal \"11 ex\" yas-text) (concat \"11ex\"))((string-equal \"12 ex\" yas-text) (concat \"12ex\"))((string-equal \"13 ex\" yas-text) (concat \"13ex\"))((string-equal \"14 ex\" yas-text) (concat \"14ex\"))((string-equal \"15 ex\" yas-text) (concat \"15ex\"))((string-equal \"16 ex\" yas-text) (concat \"16ex\"))((string-equal \"17 ex\" yas-text) (concat \"17ex\"))((string-equal \"18 ex\" yas-text) (concat \"18ex\"))((string-equal \"19 ex\" yas-text) (concat \"19ex\"))((string-equal \"20 ex\" yas-text) (concat \"20ex\")))},\n   spaceafter=${12:$(cond ((string-equal \"No space\" yas-text) (concat \"0ex\"))((string-equal \"1 ex\" yas-text) (concat \"1ex\"))((string-equal \"2 ex\" yas-text) (concat \"2ex\"))((string-equal \"3 ex\" yas-text) (concat \"3ex\"))((string-equal \"4 ex\" yas-text) (concat \"4ex\"))((string-equal \"5 ex\" yas-text) (concat \"5ex\"))((string-equal \"6 ex\" yas-text) (concat \"6ex\"))((string-equal \"7 ex\" yas-text) (concat \"7ex\"))((string-equal \"8 ex\" yas-text) (concat \"8ex\"))((string-equal \"9 ex\" yas-text) (concat \"9ex\"))((string-equal \"10 ex\" yas-text) (concat \"10ex\"))((string-equal \"11 ex\" yas-text) (concat \"11ex\"))((string-equal \"12 ex\" yas-text) (concat \"12ex\"))((string-equal \"13 ex\" yas-text) (concat \"13ex\"))((string-equal \"14 ex\" yas-text) (concat \"14ex\"))((string-equal \"15 ex\" yas-text) (concat \"15ex\"))((string-equal \"16 ex\" yas-text) (concat \"16ex\"))((string-equal \"17 ex\" yas-text) (concat \"17ex\"))((string-equal \"18 ex\" yas-text) (concat \"18ex\"))((string-equal \"19 ex\" yas-text) (concat \"19ex\"))((string-equal \"20 ex\" yas-text) (concat \"20ex\")))}]\n%%%%% END OF DEFINITION %%%%%%%%%%%%%%%%%%%%%%%%%\n$0" "Activate delimited text" nil
                        ("Typography" "Quotation")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/h_Typography/a_Quotation/h_activate_delimited_text.yasnippet" nil nil)
                       ("actpqt" "%%%%% PULL QUOTES ACTIVATION %%%%%%%%%%%%%%%%%%%%\n%% Font Style: ${1:$$(yas/choose-value '(\"No style\" \"Serif\" \"Sans serif\" \"Teletype\"))}\n%% Font Size: ${2:$$(yas/choose-value '(\"xx - text scaled at 0.6\" \"x - text scaled at 0.8\" \"typeface - text scaled at 1\" \"a - text scaled at 1.2\" \"b - text scaled at 1.44\" \"c - text scaled at 1.72\" \"d - text scaled at 2.07\"))}\n%% Font Alternative: ${3:$$(yas/choose-value '(\"Normal\" \"Bold\" \"Italic\" \"Slanted\" \"Bold Italic\" \"Bold Slanted\" \"Smallcaps\"))}\n%% Text Color: ${4:$$(yas/choose-value '(\"black\" \"blue\" \"cyan\" \"darkblue\" \"darkcyan\" \"darkgray\" \"darkgreen\" \"darkmagenta\" \"darkred\" \"darkyellow\" \"gray\" \"green\" \"lightblue\" \"lightgray\" \"lightgreen\" \"lightred\" \"magenta\" \"middleblue\" \"middlecyan\" \"middlegray\" \"middlegreen\" \"middlemagenta\" \"middlered\" \"middleyellow\" \"orange\" \"red\" \"white\" \"yellow\"))}\n%% Left Quotation Mark: ${5:$$(yas/choose-value '(\"None\" \"Double\" \"Single\" \"Double Angle\" \"Single Angle\" \"Inwards Double Angle\" \"Inwards Single Angle\" \"Lower Double Nine\" \"Lower Single Nine\" \"Upper Double Nine\" \"Upper Single Nine\" \"Upper Double Six\" \"Upper Single Six\"))}\n%% Right Quotation Mark: ${6:$$(yas/choose-value '(\"None\" \"Double\" \"Single\" \"Double Angle\" \"Single Angle\" \"Inwards Double Angle\" \"Inwards Single Angle\" \"Lower Double Nine\" \"Lower Single Nine\" \"Upper Double Nine\" \"Upper Single Nine\" \"Upper Double Six\" \"Upper Single Six\"))}\n%% Interline Spacing: ${7:$$(yas/choose-value '(\"small\" \"medium\" \"big\" \"2.0ex\" \"2.1ex\" \"2.2ex\" \"2.3ex\" \"2.3ex\" \"2.4ex\" \"2.5ex\" \"2.6ex\" \"2.7ex\" \"2.8ex - default space\" \"2.9ex\" \"3.0ex\" \"3.1ex\" \"3.2ex\" \"3.3ex\" \"3.4ex\" \"3.5ex\" \"3.6ex\" \"3.7ex\" \"3.8ex\" \"3.9ex\" \"4.0ex\"))}\n\\definefloat[pullquote][pullquotes]\n\\setupcaption[pullquote][location=none]\n\\defineframedtext[pullfrm][frame=off,width={0.50\\textwidth}] % Width of pull quotes at 50 pst of text width\n\\definedelimitedtext\n  [pulltext]\n  [style={\\\\${1:$(cond ((string-equal \"No style\" yas-text) (concat \"tf\"))((string-equal \"Serif\" yas-text) (concat \"rm\"))((string-equal \"Sans serif\" yas-text) (concat \"ss\"))((string-equal \"Teletype\" yas-text) (concat \"tt\")))}${2:$(cond ((string-equal \"xx - text scaled at 0.6\" yas-text) (concat \"xx\"))((string-equal \"x - text scaled at 0.8\" yas-text) (concat \"x\"))((string-equal \"a - text scaled at 1.2\" yas-text) (concat \"a\"))((string-equal \"b - text scaled at 1.44\" yas-text) (concat \"b\"))((string-equal \"c - text scaled at 1.72\" yas-text) (concat \"c\"))((string-equal \"d - text scaled at 2.07\" yas-text) (concat \"d\")))}${3:$(cond ((string-equal \"Bold\" yas-text) (concat \"\\\\\\bf\"))((string-equal \"Italic\" yas-text) (concat \"\\\\\\it\"))((string-equal \"Slanted\" yas-text) (concat \"\\\\\\sl\"))((string-equal \"Bold Italic\" yas-text) (concat \"\\\\\\bi\"))((string-equal \"Bold Slanted\" yas-text) (concat \"\\\\\\bs\"))((string-equal \"Smallcaps\" yas-text) (concat \"\\\\\\sc\")))}},color=$4,\n   left={${5:$(cond ((string-equal \"None\" yas-text) (concat \"\"))((string-equal \"Double\" yas-text) (concat \"\\\\\\symbol[leftquotation]\"))((string-equal \"Single\" yas-text) (concat \"\\\\\\symbol[leftquote]\"))((string-equal \"Double Angle\" yas-text) (concat \"\\\\\\leftguillemot\"))((string-equal \"Single Angle\" yas-text) (concat \"‹\"))((string-equal \"Inwards Double Angle\" yas-text) (concat \"\\\\\\rightguillemot\"))((string-equal \"Inwards Single Angle\" yas-text) (concat \"›\"))((string-equal \"Lower Double Nine\" yas-text) (concat \"\\\\\\lowerleftdoubleninequote\"))((string-equal \"Upper Double Nine\" yas-text) (concat \"\\\\\\upperleftdoubleninequote\"))((string-equal \"Lower Single Nine\" yas-text) (concat \"\\\\\\lowerleftsingleninequote\"))((string-equal \"Upper Single Nine\" yas-text) (concat \"\\\\\\upperleftsingleninequote\"))((string-equal \"Upper Double Six\" yas-text) (concat \"\\\\\\upperleftdoublesixquote\"))((string-equal \"Upper Single Six\" yas-text) (concat \"\\\\\\upperleftsinglesixquote\")))}},right={${6:$(cond ((string-equal \"None\" yas-text) (concat \"\")) ((string-equal \"Double\" yas-text) (concat \"\\\\\\symbol[rightquotation]\"))((string-equal \"Single\" yas-text) (concat \"\\\\\\symbol[rightquote]\"))((string-equal \"Double Angle\" yas-text) (concat \"\\\\\\rightguillemot\"))((string-equal \"Single Angle\" yas-text) (concat \"›\"))((string-equal \"Inwards Double Angle\" yas-text) (concat \"\\\\\\leftguillemot\"))((string-equal \"Inwards Single Angle\" yas-text) (concat \"‹\"))((string-equal \"Lower Double Nine\" yas-text) (concat \"\\\\\\lowerrightdoubleninequote\"))((string-equal \"Upper Double Nine\" yas-text) (concat \"\\\\\\upperrightdoubleninequote\"))((string-equal \"Lower Single Nine\" yas-text) (concat \"\\\\\\lowerrightsingleninequote\"))((string-equal \"Upper Single Nine\" yas-text) (concat \"\\\\\\upperrightsingleninequote\"))((string-equal \"Upper Double Six\" yas-text) (concat \"\\\\\\upperrightdoublesixquote\"))((string-equal \"Upper Single Six\" yas-text) (concat \"\\\\\\upperrightsinglesixquote\")))}},\n   before={\\startpullfrm\\setupinterlinespace[${7:$(cond ((string-equal \"small\" yas-text) (concat \"small\"))((string-equal \"medium\" yas-text) (concat \"medium\"))((string-equal \"big\" yas-text) (concat \"big\"))((string-equal \"2.0ex\" yas-text) (concat \"line=2.0ex\"))((string-equal \"2.1ex\" yas-text) (concat \"line=2.1ex\"))((string-equal \"2.2ex\" yas-text) (concat \"line=2.2ex\"))((string-equal \"2.3ex\" yas-text) (concat \"line=2.3ex\"))((string-equal \"2.4ex\" yas-text) (concat \"line=2.4ex\"))((string-equal \"2.5ex\" yas-text) (concat \"line=2.5ex\"))((string-equal \"2.6ex\" yas-text) (concat \"line=2.6ex\"))((string-equal \"2.7ex\" yas-text) (concat \"line=2.7ex\"))((string-equal \"2.8ex - default space\" yas-text) (concat \"line=2.8ex\"))((string-equal \"2.9ex\" yas-text) (concat \"line=2.9ex\"))((string-equal \"3.0ex\" yas-text) (concat \"line=3.0ex\"))((string-equal \"3.1ex\" yas-text) (concat \"line=3.1ex\"))((string-equal \"3.2ex\" yas-text) (concat \"line=3.2ex\"))((string-equal \"3.3ex\" yas-text) (concat \"line=3.3ex\"))((string-equal \"3.4ex\" yas-text) (concat \"line=3.4ex\"))((string-equal \"3.5ex\" yas-text) (concat \"line=3.5ex\"))((string-equal \"3.6ex\" yas-text) (concat \"line=3.6ex\"))((string-equal \"3.7ex\" yas-text) (concat \"line=3.7ex\"))((string-equal \"3.8ex\" yas-text) (concat \"line=3.8ex\"))((string-equal \"3.9ex\" yas-text) (concat \"line=3.9ex\"))((string-equal \"4.0ex\" yas-text) (concat \"line=4.0ex\")))}]\\setupalign[hz,hanging,hyphenated]},\n   after={\\stoppullfrm},width=fit]\n%%%%% END OF ACTIVATION %%%%%%%%%%%%%%%%%%%%%%%%%\n$0" "Activate pull quotes" nil
                        ("Typography" "Quotation")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/h_Typography/a_Quotation/g_activate_pull_quotes.yasnippet" nil nil)
                       ("ypqt" "\\startplacepullquote[location={right},title={${1:TITLE}},reference={pullquote:${1:$(replace-regexp-in-string \"[ ]+\" \"\" (capitalize (replace-regexp-in-string \"[^a-z0-9A-Z]\" \" \" yas-text)))}}]\n  \\startpulltext\n    `(replace-regexp-in-string \"~\" \"\\\\\\\\textasciitilde \"\n(replace-regexp-in-string \"#\" \"\\\\\\\\#\"\n(replace-regexp-in-string \"&\" \"\\\\\\\\&\"\n(replace-regexp-in-string \"|\" \"\\\\\\\\textbar \"\n(replace-regexp-in-string \"%\" \"\\\\\\\\percent \"\n(replace-regexp-in-string \"\\\\(%\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\percent\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(|\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textbar\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(~\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textasciitilde\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([\\$]\\\\)\\\\([[:nonascii:]A-Za-z0-9]+\\\\)\" \"\\\\\\\\textdollar \"\n(replace-regexp-in-string \"\\\\([^a-zA-Z#&|]\\\\)\\\\([\\\\]+\\\\)\\\\([^a-zA-Z#&|]\\\\)\" \"\\\\\\\\letterbackslash\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quotation{\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([»\\\"“„”]\\\\)\" \"}\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quote{\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹\\'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([›\\'‘‚’]\\\\)\" \"}\"\n(current-kill 0) nil nil 4) nil nil 2) nil nil 3) nil nil 1) nil nil 2) nil nil 1) nil nil 1) nil nil 1) nil nil 1 ))))))`\n  \\stoppulltext\n\\stopplacepullquote\n$0" "Yank as pull quote" nil
                        ("Typography" "Quotation")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/h_Typography/a_Quotation/f_yank_as_pull_quote.yasnippet" nil nil)
                       ("ydqt" "\\quotation{`(replace-regexp-in-string \"~\" \"\\\\\\\\textasciitilde \"\n(replace-regexp-in-string \"#\" \"\\\\\\\\#\"\n(replace-regexp-in-string \"&\" \"\\\\\\\\&\"\n(replace-regexp-in-string \"|\" \"\\\\\\\\textbar \"\n(replace-regexp-in-string \"%\" \"\\\\\\\\percent \"\n(replace-regexp-in-string \"\\\\(%\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\percent\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(|\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textbar\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(~\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textasciitilde\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([\\$]\\\\)\\\\([[:nonascii:]A-Za-z0-9]+\\\\)\" \"\\\\\\\\textdollar \"\n(replace-regexp-in-string \"\\\\([^a-zA-Z#&|]\\\\)\\\\([\\\\]+\\\\)\\\\([^a-zA-Z#&|]\\\\)\" \"\\\\\\\\letterbackslash\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quotation{\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([»\\\"“„”]\\\\)\" \"}\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quote{\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹\\'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([›\\'‘‚’]\\\\)\" \"}\"\n(current-kill 0) nil nil 4) nil nil 2) nil nil 3) nil nil 1) nil nil 2) nil nil 1) nil nil 1) nil nil 1) nil nil 1 ))))))`}$0" "Yank inside double quotes" nil
                        ("Typography" "Quotation")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/h_Typography/a_Quotation/e_yank_inside_double_quotes.yasnippet" nil nil)
                       ("ysqt" "\\quote{`(replace-regexp-in-string \"~\" \"\\\\\\\\textasciitilde \"\n(replace-regexp-in-string \"#\" \"\\\\\\\\#\"\n(replace-regexp-in-string \"&\" \"\\\\\\\\&\"\n(replace-regexp-in-string \"|\" \"\\\\\\\\textbar \"\n(replace-regexp-in-string \"%\" \"\\\\\\\\percent \"\n(replace-regexp-in-string \"\\\\(%\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\percent\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(|\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textbar\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(~\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textasciitilde\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([\\$]\\\\)\\\\([[:nonascii:]A-Za-z0-9]+\\\\)\" \"\\\\\\\\textdollar \"\n(replace-regexp-in-string \"\\\\([^a-zA-Z#&|]\\\\)\\\\([\\\\]+\\\\)\\\\([^a-zA-Z#&|]\\\\)\" \"\\\\\\\\letterbackslash\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quotation{\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([»\\\"“„”]\\\\)\" \"}\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quote{\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹\\'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([›\\'‘‚’]\\\\)\" \"}\"\n(current-kill 0) nil nil 4) nil nil 2) nil nil 3) nil nil 1) nil nil 2) nil nil 1) nil nil 1) nil nil 1) nil nil 1 ))))))`}$0" "Yank inside single quotes" nil
                        ("Typography" "Quotation")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/h_Typography/a_Quotation/d_yank_inside_single_quotes.yasnippet" nil nil)
                       ("pqt" "\\startplacepullquote[location={right},title={${1:TITLE}},reference={pullquote:${1:$(replace-regexp-in-string \"[ ]+\" \"\" (capitalize (replace-regexp-in-string \"[^a-z0-9A-Z]\" \" \" yas-text)))}}]\n  \\startpulltext\n    ${2:TEXT}\n  \\stoppulltext\n\\stopplacepullquote\n$0" "Pull quote" nil
                        ("Typography" "Quotation")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/h_Typography/a_Quotation/c_pull_quote.yasnippet" nil nil)
                       ("dqt" "\\quotation{${1:TEXT}}$0" "Double quotes" nil
                        ("Typography" "Quotation")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/h_Typography/a_Quotation/b_double_quotes.yasnippet" nil nil)
                       ("sqt" "\\quote{${1:TEXT}}$0" "Single quotes" nil
                        ("Typography" "Quotation")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/h_Typography/a_Quotation/a_single_quotes.yasnippet" nil nil)))


;;; Snippet definitions:
;;;
(yas-define-snippets 'context-mode
                     '((nil "\\overstrike{`(replace-regexp-in-string \"~\" \"\\\\\\\\textasciitilde \"\n(replace-regexp-in-string \"#\" \"\\\\\\\\#\"\n(replace-regexp-in-string \"&\" \"\\\\\\\\&\"\n(replace-regexp-in-string \"|\" \"\\\\\\\\textbar \"\n(replace-regexp-in-string \"%\" \"\\\\\\\\percent \"\n(replace-regexp-in-string \"\\\\(%\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\percent\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(|\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textbar\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(~\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textasciitilde\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([\\$]\\\\)\\\\([[:nonascii:]A-Za-z0-9]+\\\\)\" \"\\\\\\\\textdollar \"\n(replace-regexp-in-string \"\\\\([^a-zA-Z#&|]\\\\)\\\\([\\\\]+\\\\)\\\\([^a-zA-Z#&|]\\\\)\" \"\\\\\\\\letterbackslash\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quotation{\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([»\\\"“„”]\\\\)\" \"}\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quote{\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹\\'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([›\\'‘‚’]\\\\)\" \"}\"\n(yas-selected-text) nil nil 4) nil nil 2) nil nil 3) nil nil 1) nil nil 2) nil nil 1) nil nil 1) nil nil 1) nil nil 1 ))))))`}$0" "Region as overstriked" nil
                            ("Typography" "Text Decoration")
                            ((yas/indent-line 'fixed)
                             (yas/wrap-around-region 'nil))
                            "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/h_Typography/b_Text_Decoration/h_region_as_overstriked.yasnippet" "C-c o s" nil)
                       (nil "\\underbar{`(replace-regexp-in-string \"~\" \"\\\\\\\\textasciitilde \"\n(replace-regexp-in-string \"#\" \"\\\\\\\\#\"\n(replace-regexp-in-string \"&\" \"\\\\\\\\&\"\n(replace-regexp-in-string \"|\" \"\\\\\\\\textbar \"\n(replace-regexp-in-string \"%\" \"\\\\\\\\percent \"\n(replace-regexp-in-string \"\\\\(%\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\percent\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(|\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textbar\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(~\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textasciitilde\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([\\$]\\\\)\\\\([[:nonascii:]A-Za-z0-9]+\\\\)\" \"\\\\\\\\textdollar \"\n(replace-regexp-in-string \"\\\\([^a-zA-Z#&|]\\\\)\\\\([\\\\]+\\\\)\\\\([^a-zA-Z#&|]\\\\)\" \"\\\\\\\\letterbackslash\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quotation{\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([»\\\"“„”]\\\\)\" \"}\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quote{\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹\\'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([›\\'‘‚’]\\\\)\" \"}\"\n(yas-selected-text) nil nil 4) nil nil 2) nil nil 3) nil nil 1) nil nil 2) nil nil 1) nil nil 1) nil nil 1) nil nil 1 ))))))`}$0" "Region as underlined" nil
                            ("Typography" "Text Decoration")
                            ((yas/indent-line 'fixed)
                             (yas/wrap-around-region 'nil))
                            "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/h_Typography/b_Text_Decoration/g_region_as_underlined.yasnippet" "C-c u l" nil)
                       ("olines" "\\overbars{${1:WORD(S)}}$0" "Overlines" nil
                        ("Typography" "Text Decoration")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/h_Typography/b_Text_Decoration/f_overlines.yasnippet" nil nil)
                       ("oline" "\\overbar{${1:TEXT}}$0" "Overline" nil
                        ("Typography" "Text Decoration")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/h_Typography/b_Text_Decoration/e_overline.yasnippet" nil nil)
                       ("ostrikes" "\\overstrikes{${1:WORD(S)}}$0" "Overstrikes" nil
                        ("Typography" "Text Decoration")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/h_Typography/b_Text_Decoration/d_overstrikes.yasnippet" nil nil)
                       ("ostrike" "\\overstrike{${1:TEXT}}$0" "Overstrike" nil
                        ("Typography" "Text Decoration")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/h_Typography/b_Text_Decoration/c_overstrike.yasnippet" nil nil)
                       ("ulines" "\\underbars{${1:WORD(S)}}$0" "Underlines" nil
                        ("Typography" "Text Decoration")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/h_Typography/b_Text_Decoration/b_underlines.yasnippet" nil nil)
                       ("uline" "\\underbar{${1:TEXT}}$0" "Underline" nil
                        ("Typography" "Text Decoration")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/h_Typography/b_Text_Decoration/a_underline.yasnippet" nil nil)))


;;; Snippet definitions:
;;;
(yas-define-snippets 'context-mode
                     '((nil "\\\\${1:$$(yas/choose-value '(\"nocap\" \"cap\" \"Words\"))}{`(replace-regexp-in-string \"~\" \"\\\\\\\\textasciitilde \"\n(replace-regexp-in-string \"#\" \"\\\\\\\\#\"\n(replace-regexp-in-string \"&\" \"\\\\\\\\&\"\n(replace-regexp-in-string \"|\" \"\\\\\\\\textbar \"\n(replace-regexp-in-string \"%\" \"\\\\\\\\percent \"\n(replace-regexp-in-string \"\\\\(%\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\percent\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(|\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textbar\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(~\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textasciitilde\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([\\$]\\\\)\\\\([[:nonascii:]A-Za-z0-9]+\\\\)\" \"\\\\\\\\textdollar \"\n(replace-regexp-in-string \"\\\\([^a-zA-Z#&|]\\\\)\\\\([\\\\]+\\\\)\\\\([^a-zA-Z#&|]\\\\)\" \"\\\\\\\\letterbackslash\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quotation{\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([»\\\"“„”]\\\\)\" \"}\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quote{\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹\\'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([›\\'‘‚’]\\\\)\" \"}\"\n(yas-selected-text) nil nil 4) nil nil 2) nil nil 3) nil nil 1) nil nil 2) nil nil 1) nil nil 1) nil nil 1) nil nil 1 ))))))`}$0" "Change letter casing of region" nil
                            ("Typography" "Letter Case")
                            ((yas/indent-line 'fixed)
                             (yas/wrap-around-region 'nil))
                            "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/h_Typography/c_Letter_Case/d_change_letter_casing_of_region.yasnippet" "C-c l c" nil)
                       ("ccase" "\\Words{${1:TEXT}} $0" "Capitalize" nil
                        ("Typography" "Letter Case")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/h_Typography/c_Letter_Case/c_capitalize.yasnippet" nil nil)
                       ("ucase" "\\cap{${1:TEXT}}$0" "Uppercase" nil
                        ("Typography" "Letter Case")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/h_Typography/c_Letter_Case/b_uppercase.yasnippet" nil nil)
                       ("lcase" "\\nocap{${1:TEXT}}$0" "Lowercase" nil
                        ("Typography" "Letter Case")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/h_Typography/c_Letter_Case/a_lowercase.yasnippet" nil nil)))


;;; Snippet definitions:
;;;
(yas-define-snippets 'context-mode
                     '((nil "\\lettrine{`(substring (replace-regexp-in-string \"~\" \"\\\\\\\\textasciitilde \"\n(replace-regexp-in-string \"#\" \"\\\\\\\\#\"\n(replace-regexp-in-string \"&\" \"\\\\\\\\&\"\n(replace-regexp-in-string \"|\" \"\\\\\\\\textbar \"\n(replace-regexp-in-string \"%\" \"\\\\\\\\percent \"\n(replace-regexp-in-string \"\\\\(%\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\percent\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(|\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textbar\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(~\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textasciitilde\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([\\$]\\\\)\\\\([[:nonascii:]A-Za-z0-9]+\\\\)\" \"\\\\\\\\textdollar \"\n(replace-regexp-in-string \"\\\\([^a-zA-Z#&|]\\\\)\\\\([\\\\]+\\\\)\\\\([^a-zA-Z#&|]\\\\)\" \"\\\\\\\\letterbackslash\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quotation{\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([»\\\"“„”]\\\\)\" \"}\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quote{\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹\\'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([›\\'‘‚’]\\\\)\" \"}\"\n(yas-selected-text) nil nil 4) nil nil 2) nil nil 3) nil nil 1) nil nil 2) nil nil 1) nil nil 1) nil nil 1) nil nil 1 ))))))0 1)`}{`(substring\n(replace-regexp-in-string \"~\" \"\\\\\\\\textasciitilde \"\n(replace-regexp-in-string \"#\" \"\\\\\\\\#\"\n(replace-regexp-in-string \"&\" \"\\\\\\\\&\"\n(replace-regexp-in-string \"|\" \"\\\\\\\\textbar \"\n(replace-regexp-in-string \"%\" \"\\\\\\\\percent \"\n(replace-regexp-in-string \"\\\\(%\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\percent\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(|\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textbar\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(~\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textasciitilde\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([\\$]\\\\)\\\\([[:nonascii:]A-Za-z0-9]+\\\\)\" \"\\\\\\\\textdollar \"\n(replace-regexp-in-string \"\\\\([^a-zA-Z#&|]\\\\)\\\\([\\\\]+\\\\)\\\\([^a-zA-Z#&|]\\\\)\" \"\\\\\\\\letterbackslash\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quotation{\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([»\\\"“„”]\\\\)\" \"}\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quote{\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹\\'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([›\\'‘‚’]\\\\)\" \"}\"\n(yas-selected-text) nil nil 4) nil nil 2) nil nil 3) nil nil 1) nil nil 2) nil nil 1) nil nil 1) nil nil 1) nil nil 1 ))))))1 nil)`}$0" "Lettrine-ize region" nil
                            ("Typography" "Initials")
                            ((yas/indent-line 'fixed)
                             (yas/wrap-around-region 'nil))
                            "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/h_Typography/d_Initials/e_lettrineize_region.yasnippet" "C-c l t r" nil)
                       ("actltr" "%%%%% LETTRINES ACTIVATION %%%%%%%%%%%%%%%%%%%%%%\n%% USAGE: \\lettrine{FIRST CHARACTER}{REST OF WORD/TEXT}\n\\usemodule[lettrine]\n\\setuplettrine\n  [Lines=2\n   Hang=0.1,\n   Oversize=0.0,\n   Raise=0.05,\n   Findent=0.25em,\n   Nindent=0.25em,\n   Slope=0pt,\n   Image=no,\n   TextFont={\\sc},\n   Ante=]\n%%%%% END OF ACTIVATION %%%%%%%%%%%%%%%%%%%%%%%%%\n$0" "Activate lettrines" nil
                        ("Typography" "Initials")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/h_Typography/d_Initials/d_activate_lettrines.yasnippet" nil nil)
                       ("setinit" "%%%%% INITIALS SETUP %%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%% USAGE: \\placeinitial <W>ORD\n\\setupinitial\n  [color=${1:$$(yas/choose-value '(\"black\" \"blue\" \"cyan\" \"darkblue\" \"darkcyan\" \"darkgray\" \"darkgreen\" \"darkmagenta\" \"darkred\" \"darkyellow\" \"gray\" \"green\" \"lightblue\" \"lightgray\" \"lightgreen\" \"lightred\" \"magenta\" \"middleblue\" \"middlecyan\" \"middlegray\" \"middlegreen\" \"middlemagenta\" \"middlered\" \"middleyellow\" \"orange\" \"red\" \"white\" \"yellow\"))},\n   font={Bold sa ${2:$$(yas/choose-value '(\" \" \"1\" \"1.5\" \"2\" \"2.5\" \"3\" \"3.5\" \"4\" \"5\"))}},\n   distance=${3:$$(yas/choose-value '(\" \" \"1pt\" \"2pt\" \"3pt\" \"4pt\" \"5pt\" \"6pt\" \"7pt\" \"8pt\" \"9pt\" \"10pt\"))},\n   n=${4:$$(yas/choose-value '(\" \" \"1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\" \"10\"))}]\n%%%%% END OF SETUP %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n$0" "Setup initials" nil
                        ("Typography" "Initials")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/h_Typography/d_Initials/c_setup_initials.yasnippet" nil nil)
                       ("ltr" "\\lettrine{${1:FIRST CHARACTER}}{${2:TEXT}}$0" "Letterine-ize text" nil
                        ("Typography" "Initials")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/h_Typography/d_Initials/b_letterineize_text.yasnippet" nil nil)
                       ("init" "\\placeinitial $0" "Initial-ize word" nil
                        ("Typography" "Initials")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/h_Typography/d_Initials/a_initialize_word.yasnippet" nil nil)))


;;; Snippet definitions:
;;;
(yas-define-snippets 'context-mode
                     '((nil "{\\hw `(replace-regexp-in-string \"~\" \"\\\\\\\\textasciitilde \"\n(replace-regexp-in-string \"#\" \"\\\\\\\\#\"\n(replace-regexp-in-string \"&\" \"\\\\\\\\&\"\n(replace-regexp-in-string \"|\" \"\\\\\\\\textbar \"\n(replace-regexp-in-string \"%\" \"\\\\\\\\percent \"\n(replace-regexp-in-string \"\\\\(%\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\percent\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(|\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textbar\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(~\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textasciitilde\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([\\$]\\\\)\\\\([[:nonascii:]A-Za-z0-9]+\\\\)\" \"\\\\\\\\textdollar \"\n(replace-regexp-in-string \"\\\\([^a-zA-Z#&|]\\\\)\\\\([\\\\]+\\\\)\\\\([^a-zA-Z#&|]\\\\)\" \"\\\\\\\\letterbackslash\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quotation{\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([»\\\"“„”]\\\\)\" \"}\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quote{\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹\\'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([›\\'‘‚’]\\\\)\" \"}\"\n(yas-selected-text) nil nil 4) nil nil 2) nil nil 3) nil nil 1) nil nil 2) nil nil 1) nil nil 1) nil nil 1) nil nil 1 ))))))`}$0" "Region in handwritten" nil
                            ("Typography" "Font Styles")
                            ((yas/indent-line 'fixed)
                             (yas/wrap-around-region 'nil))
                            "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/h_Typography/e_Font_Styles/o_region_in_handwritten.yasnippet" "C-c h w" nil)
                       (nil "{\\cg `(replace-regexp-in-string \"~\" \"\\\\\\\\textasciitilde \"\n(replace-regexp-in-string \"#\" \"\\\\\\\\#\"\n(replace-regexp-in-string \"&\" \"\\\\\\\\&\"\n(replace-regexp-in-string \"|\" \"\\\\\\\\textbar \"\n(replace-regexp-in-string \"%\" \"\\\\\\\\percent \"\n(replace-regexp-in-string \"\\\\(%\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\percent\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(|\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textbar\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(~\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textasciitilde\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([\\$]\\\\)\\\\([[:nonascii:]A-Za-z0-9]+\\\\)\" \"\\\\\\\\textdollar \"\n(replace-regexp-in-string \"\\\\([^a-zA-Z#&|]\\\\)\\\\([\\\\]+\\\\)\\\\([^a-zA-Z#&|]\\\\)\" \"\\\\\\\\letterbackslash\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quotation{\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([»\\\"“„”]\\\\)\" \"}\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quote{\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹\\'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([›\\'‘‚’]\\\\)\" \"}\"\n(yas-selected-text) nil nil 4) nil nil 2) nil nil 3) nil nil 1) nil nil 2) nil nil 1) nil nil 1) nil nil 1) nil nil 1 ))))))`}$0" "Region in calligraphic" nil
                            ("Typography" "Font Styles")
                            ((yas/indent-line 'fixed)
                             (yas/wrap-around-region 'nil))
                            "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/h_Typography/e_Font_Styles/n_region_in_calligraphic.yasnippet" "C-c c g" nil)
                       (nil "{\\tt `(replace-regexp-in-string \"~\" \"\\\\\\\\textasciitilde \"\n(replace-regexp-in-string \"#\" \"\\\\\\\\#\"\n(replace-regexp-in-string \"&\" \"\\\\\\\\&\"\n(replace-regexp-in-string \"|\" \"\\\\\\\\textbar \"\n(replace-regexp-in-string \"%\" \"\\\\\\\\percent \"\n(replace-regexp-in-string \"\\\\(%\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\percent\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(|\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textbar\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(~\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textasciitilde\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([\\$]\\\\)\\\\([[:nonascii:]A-Za-z0-9]+\\\\)\" \"\\\\\\\\textdollar \"\n(replace-regexp-in-string \"\\\\([^a-zA-Z#&|]\\\\)\\\\([\\\\]+\\\\)\\\\([^a-zA-Z#&|]\\\\)\" \"\\\\\\\\letterbackslash\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quotation{\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([»\\\"“„”]\\\\)\" \"}\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quote{\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹\\'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([›\\'‘‚’]\\\\)\" \"}\"\n(yas-selected-text) nil nil 4) nil nil 2) nil nil 3) nil nil 1) nil nil 2) nil nil 1) nil nil 1) nil nil 1) nil nil 1 ))))))`}$0" "Region in teletype" nil
                            ("Typography" "Font Styles")
                            ((yas/indent-line 'fixed)
                             (yas/wrap-around-region 'nil))
                            "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/h_Typography/e_Font_Styles/m_region_in_teletype.yasnippet" "C-c t t" nil)
                       (nil "{\\ss `(replace-regexp-in-string \"~\" \"\\\\\\\\textasciitilde \"\n(replace-regexp-in-string \"#\" \"\\\\\\\\#\"\n(replace-regexp-in-string \"&\" \"\\\\\\\\&\"\n(replace-regexp-in-string \"|\" \"\\\\\\\\textbar \"\n(replace-regexp-in-string \"%\" \"\\\\\\\\percent \"\n(replace-regexp-in-string \"\\\\(%\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\percent\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(|\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textbar\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(~\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textasciitilde\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([\\$]\\\\)\\\\([[:nonascii:]A-Za-z0-9]+\\\\)\" \"\\\\\\\\textdollar \"\n(replace-regexp-in-string \"\\\\([^a-zA-Z#&|]\\\\)\\\\([\\\\]+\\\\)\\\\([^a-zA-Z#&|]\\\\)\" \"\\\\\\\\letterbackslash\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quotation{\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([»\\\"“„”]\\\\)\" \"}\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quote{\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹\\'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([›\\'‘‚’]\\\\)\" \"}\"\n(yas-selected-text) nil nil 4) nil nil 2) nil nil 3) nil nil 1) nil nil 2) nil nil 1) nil nil 1) nil nil 1) nil nil 1 ))))))`}$0" "Region in sans serif" nil
                            ("Typography" "Font Styles")
                            ((yas/indent-line 'fixed)
                             (yas/wrap-around-region 'nil))
                            "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/h_Typography/e_Font_Styles/l_region_in_sans_serif.yasnippet" "C-c s f" nil)
                       (nil "{\\rm `(replace-regexp-in-string \"~\" \"\\\\\\\\textasciitilde \"\n(replace-regexp-in-string \"#\" \"\\\\\\\\#\"\n(replace-regexp-in-string \"&\" \"\\\\\\\\&\"\n(replace-regexp-in-string \"|\" \"\\\\\\\\textbar \"\n(replace-regexp-in-string \"%\" \"\\\\\\\\percent \"\n(replace-regexp-in-string \"\\\\(%\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\percent\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(|\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textbar\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(~\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textasciitilde\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([\\$]\\\\)\\\\([[:nonascii:]A-Za-z0-9]+\\\\)\" \"\\\\\\\\textdollar \"\n(replace-regexp-in-string \"\\\\([^a-zA-Z#&|]\\\\)\\\\([\\\\]+\\\\)\\\\([^a-zA-Z#&|]\\\\)\" \"\\\\\\\\letterbackslash\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quotation{\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([»\\\"“„”]\\\\)\" \"}\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quote{\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹\\'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([›\\'‘‚’]\\\\)\" \"}\"\n(yas-selected-text) nil nil 4) nil nil 2) nil nil 3) nil nil 1) nil nil 2) nil nil 1) nil nil 1) nil nil 1) nil nil 1 ))))))`}$0" "Region in roman" nil
                            ("Typography" "Font Styles")
                            ((yas/indent-line 'fixed)
                             (yas/wrap-around-region 'nil))
                            "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/h_Typography/e_Font_Styles/k_region_in_roman.yasnippet" "C-c r m" nil)
                       ("yhw" "{\\hw `(replace-regexp-in-string \"~\" \"\\\\\\\\textasciitilde \"\n(replace-regexp-in-string \"#\" \"\\\\\\\\#\"\n(replace-regexp-in-string \"&\" \"\\\\\\\\&\"\n(replace-regexp-in-string \"|\" \"\\\\\\\\textbar \"\n(replace-regexp-in-string \"%\" \"\\\\\\\\percent \"\n(replace-regexp-in-string \"\\\\(%\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\percent\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(|\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textbar\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(~\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textasciitilde\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([\\$]\\\\)\\\\([[:nonascii:]A-Za-z0-9]+\\\\)\" \"\\\\\\\\textdollar \"\n(replace-regexp-in-string \"\\\\([^a-zA-Z#&|]\\\\)\\\\([\\\\]+\\\\)\\\\([^a-zA-Z#&|]\\\\)\" \"\\\\\\\\letterbackslash\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quotation{\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([»\\\"“„”]\\\\)\" \"}\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quote{\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹\\'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([›\\'‘‚’]\\\\)\" \"}\"\n(current-kill 0) nil nil 4) nil nil 2) nil nil 3) nil nil 1) nil nil 2) nil nil 1) nil nil 1) nil nil 1) nil nil 1 ))))))`}$0" "Yank as handwritten" nil
                        ("Typography" "Font Styles")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/h_Typography/e_Font_Styles/j_yank_as_handwritten.yasnippet" nil nil)
                       ("ycg" "{\\cg `(replace-regexp-in-string \"~\" \"\\\\\\\\textasciitilde \"\n(replace-regexp-in-string \"#\" \"\\\\\\\\#\"\n(replace-regexp-in-string \"&\" \"\\\\\\\\&\"\n(replace-regexp-in-string \"|\" \"\\\\\\\\textbar \"\n(replace-regexp-in-string \"%\" \"\\\\\\\\percent \"\n(replace-regexp-in-string \"\\\\(%\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\percent\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(|\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textbar\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(~\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textasciitilde\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([\\$]\\\\)\\\\([[:nonascii:]A-Za-z0-9]+\\\\)\" \"\\\\\\\\textdollar \"\n(replace-regexp-in-string \"\\\\([^a-zA-Z#&|]\\\\)\\\\([\\\\]+\\\\)\\\\([^a-zA-Z#&|]\\\\)\" \"\\\\\\\\letterbackslash\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quotation{\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([»\\\"“„”]\\\\)\" \"}\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quote{\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹\\'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([›\\'‘‚’]\\\\)\" \"}\"\n(current-kill 0) nil nil 4) nil nil 2) nil nil 3) nil nil 1) nil nil 2) nil nil 1) nil nil 1) nil nil 1) nil nil 1 ))))))`}$0" "Yank as calligraphic" nil
                        ("Typography" "Font Styles")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/h_Typography/e_Font_Styles/i_yank_as_calligraphic.yasnippet" nil nil)
                       ("ytt" "{\\tt `(replace-regexp-in-string \"~\" \"\\\\\\\\textasciitilde \"\n(replace-regexp-in-string \"#\" \"\\\\\\\\#\"\n(replace-regexp-in-string \"&\" \"\\\\\\\\&\"\n(replace-regexp-in-string \"|\" \"\\\\\\\\textbar \"\n(replace-regexp-in-string \"%\" \"\\\\\\\\percent \"\n(replace-regexp-in-string \"\\\\(%\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\percent\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(|\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textbar\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(~\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textasciitilde\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([\\$]\\\\)\\\\([[:nonascii:]A-Za-z0-9]+\\\\)\" \"\\\\\\\\textdollar \"\n(replace-regexp-in-string \"\\\\([^a-zA-Z#&|]\\\\)\\\\([\\\\]+\\\\)\\\\([^a-zA-Z#&|]\\\\)\" \"\\\\\\\\letterbackslash\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quotation{\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([»\\\"“„”]\\\\)\" \"}\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quote{\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹\\'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([›\\'‘‚’]\\\\)\" \"}\"\n(current-kill 0) nil nil 4) nil nil 2) nil nil 3) nil nil 1) nil nil 2) nil nil 1) nil nil 1) nil nil 1) nil nil 1 ))))))`}$0" "Yank as teletype" nil
                        ("Typography" "Font Styles")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/h_Typography/e_Font_Styles/h_yank_as_teletype.yasnippet" nil nil)
                       ("yssr" "{\\ss `(replace-regexp-in-string \"~\" \"\\\\\\\\textasciitilde \"\n(replace-regexp-in-string \"#\" \"\\\\\\\\#\"\n(replace-regexp-in-string \"&\" \"\\\\\\\\&\"\n(replace-regexp-in-string \"|\" \"\\\\\\\\textbar \"\n(replace-regexp-in-string \"%\" \"\\\\\\\\percent \"\n(replace-regexp-in-string \"\\\\(%\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\percent\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(|\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textbar\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(~\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textasciitilde\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([\\$]\\\\)\\\\([[:nonascii:]A-Za-z0-9]+\\\\)\" \"\\\\\\\\textdollar \"\n(replace-regexp-in-string \"\\\\([^a-zA-Z#&|]\\\\)\\\\([\\\\]+\\\\)\\\\([^a-zA-Z#&|]\\\\)\" \"\\\\\\\\letterbackslash\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quotation{\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([»\\\"“„”]\\\\)\" \"}\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quote{\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹\\'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([›\\'‘‚’]\\\\)\" \"}\"\n(current-kill 0) nil nil 4) nil nil 2) nil nil 3) nil nil 1) nil nil 2) nil nil 1) nil nil 1) nil nil 1) nil nil 1 ))))))`}$0" "Yank as sans serif" nil
                        ("Typography" "Font Styles")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/h_Typography/e_Font_Styles/g_yank_as_sans_serif.yasnippet" nil nil)
                       ("yrm" "{\\rm `(replace-regexp-in-string \"~\" \"\\\\\\\\textasciitilde \"\n(replace-regexp-in-string \"#\" \"\\\\\\\\#\"\n(replace-regexp-in-string \"&\" \"\\\\\\\\&\"\n(replace-regexp-in-string \"|\" \"\\\\\\\\textbar \"\n(replace-regexp-in-string \"%\" \"\\\\\\\\percent \"\n(replace-regexp-in-string \"\\\\(%\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\percent\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(|\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textbar\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(~\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textasciitilde\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([\\$]\\\\)\\\\([[:nonascii:]A-Za-z0-9]+\\\\)\" \"\\\\\\\\textdollar \"\n(replace-regexp-in-string \"\\\\([^a-zA-Z#&|]\\\\)\\\\([\\\\]+\\\\)\\\\([^a-zA-Z#&|]\\\\)\" \"\\\\\\\\letterbackslash\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quotation{\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([»\\\"“„”]\\\\)\" \"}\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quote{\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹\\'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([›\\'‘‚’]\\\\)\" \"}\"\n(current-kill 0) nil nil 4) nil nil 2) nil nil 3) nil nil 1) nil nil 2) nil nil 1) nil nil 1) nil nil 1) nil nil 1 ))))))`}$0" "Yank as roman" nil
                        ("Typography" "Font Styles")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/h_Typography/e_Font_Styles/f_yank_as_roman.yasnippet" nil nil)
                       ("hw" "{\\hw ${1:TEXT}}$0 " "Handwritten" nil
                        ("Typography" "Font Styles")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/h_Typography/e_Font_Styles/e_handwritten.yasnippet" nil nil)
                       ("cg" "{\\cg ${1:TEXT}}$0 " "Calligraphic" nil
                        ("Typography" "Font Styles")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/h_Typography/e_Font_Styles/d_calligraphic.yasnippet" nil nil)
                       ("tt" "{\\tt ${1:TEXT}}$0 " "Teletype" nil
                        ("Typography" "Font Styles")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/h_Typography/e_Font_Styles/c_teletype.yasnippet" nil nil)
                       ("ss" "{\\ss ${1:TEXT}}$0" "Sans serif" nil
                        ("Typography" "Font Styles")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/h_Typography/e_Font_Styles/b_sans_serif.yasnippet" nil nil)
                       ("rm" "{\\rm ${1:TEXT}}$0 " "Roman" nil
                        ("Typography" "Font Styles")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/h_Typography/e_Font_Styles/a_roman.yasnippet" nil nil)))


;;; Snippet definitions:
;;;
(yas-define-snippets 'context-mode
                     '((nil "{\\bs `(replace-regexp-in-string \"~\" \"\\\\\\\\textasciitilde \"\n(replace-regexp-in-string \"#\" \"\\\\\\\\#\"\n(replace-regexp-in-string \"&\" \"\\\\\\\\&\"\n(replace-regexp-in-string \"|\" \"\\\\\\\\textbar \"\n(replace-regexp-in-string \"%\" \"\\\\\\\\percent \"\n(replace-regexp-in-string \"\\\\(%\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\percent\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(|\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textbar\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(~\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textasciitilde\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([\\$]\\\\)\\\\([[:nonascii:]A-Za-z0-9]+\\\\)\" \"\\\\\\\\textdollar \"\n(replace-regexp-in-string \"\\\\([^a-zA-Z#&|]\\\\)\\\\([\\\\]+\\\\)\\\\([^a-zA-Z#&|]\\\\)\" \"\\\\\\\\letterbackslash\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quotation{\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([»\\\"“„”]\\\\)\" \"}\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quote{\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹\\'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([›\\'‘‚’]\\\\)\" \"}\"\n(yas-selected-text) nil nil 4) nil nil 2) nil nil 3) nil nil 1) nil nil 2) nil nil 1) nil nil 1) nil nil 1) nil nil 1 ))))))`}$0" "Region in boldslanted" nil
                            ("Typography" "Font Alternatives")
                            ((yas/indent-line 'fixed)
                             (yas/wrap-around-region 'nil))
                            "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/h_Typography/f_Font_Alternatives/w_region_in_boldslanted.yasnippet" "C-c b s" nil)
                       (nil "{\\bi `(replace-regexp-in-string \"~\" \"\\\\\\\\textasciitilde \"\n(replace-regexp-in-string \"#\" \"\\\\\\\\#\"\n(replace-regexp-in-string \"&\" \"\\\\\\\\&\"\n(replace-regexp-in-string \"|\" \"\\\\\\\\textbar \"\n(replace-regexp-in-string \"%\" \"\\\\\\\\percent \"\n(replace-regexp-in-string \"\\\\(%\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\percent\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(|\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textbar\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(~\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textasciitilde\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([\\$]\\\\)\\\\([[:nonascii:]A-Za-z0-9]+\\\\)\" \"\\\\\\\\textdollar \"\n(replace-regexp-in-string \"\\\\([^a-zA-Z#&|]\\\\)\\\\([\\\\]+\\\\)\\\\([^a-zA-Z#&|]\\\\)\" \"\\\\\\\\letterbackslash\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quotation{\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([»\\\"“„”]\\\\)\" \"}\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quote{\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹\\'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([›\\'‘‚’]\\\\)\" \"}\"\n(yas-selected-text) nil nil 4) nil nil 2) nil nil 3) nil nil 1) nil nil 2) nil nil 1) nil nil 1) nil nil 1) nil nil 1 ))))))`}$0" "Region in bolditalic" nil
                            ("Typography" "Font Alternatives")
                            ((yas/indent-line 'fixed)
                             (yas/wrap-around-region 'nil))
                            "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/h_Typography/f_Font_Alternatives/v_region_in_bolditalic.yasnippet" "C-c b i" nil)
                       (nil "{\\sl `(replace-regexp-in-string \"~\" \"\\\\\\\\textasciitilde \"\n(replace-regexp-in-string \"#\" \"\\\\\\\\#\"\n(replace-regexp-in-string \"&\" \"\\\\\\\\&\"\n(replace-regexp-in-string \"|\" \"\\\\\\\\textbar \"\n(replace-regexp-in-string \"%\" \"\\\\\\\\percent \"\n(replace-regexp-in-string \"\\\\(%\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\percent\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(|\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textbar\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(~\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textasciitilde\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([\\$]\\\\)\\\\([[:nonascii:]A-Za-z0-9]+\\\\)\" \"\\\\\\\\textdollar \"\n(replace-regexp-in-string \"\\\\([^a-zA-Z#&|]\\\\)\\\\([\\\\]+\\\\)\\\\([^a-zA-Z#&|]\\\\)\" \"\\\\\\\\letterbackslash\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quotation{\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([»\\\"“„”]\\\\)\" \"}\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quote{\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹\\'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([›\\'‘‚’]\\\\)\" \"}\"\n(yas-selected-text) nil nil 4) nil nil 2) nil nil 3) nil nil 1) nil nil 2) nil nil 1) nil nil 1) nil nil 1) nil nil 1 ))))))`}$0" "Region in slanted" nil
                            ("Typography" "Font Alternatives")
                            ((yas/indent-line 'fixed)
                             (yas/wrap-around-region 'nil))
                            "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/h_Typography/f_Font_Alternatives/u_region_in_slanted.yasnippet" "C-c s l" nil)
                       (nil "{\\os `(replace-regexp-in-string \"~\" \"\\\\\\\\textasciitilde \"\n(replace-regexp-in-string \"#\" \"\\\\\\\\#\"\n(replace-regexp-in-string \"&\" \"\\\\\\\\&\"\n(replace-regexp-in-string \"|\" \"\\\\\\\\textbar \"\n(replace-regexp-in-string \"%\" \"\\\\\\\\percent \"\n(replace-regexp-in-string \"\\\\(%\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\percent\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(|\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textbar\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(~\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textasciitilde\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([\\$]\\\\)\\\\([[:nonascii:]A-Za-z0-9]+\\\\)\" \"\\\\\\\\textdollar \"\n(replace-regexp-in-string \"\\\\([^a-zA-Z#&|]\\\\)\\\\([\\\\]+\\\\)\\\\([^a-zA-Z#&|]\\\\)\" \"\\\\\\\\letterbackslash\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quotation{\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([»\\\"“„”]\\\\)\" \"}\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quote{\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹\\'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([›\\'‘‚’]\\\\)\" \"}\"\n(yas-selected-text) nil nil 4) nil nil 2) nil nil 3) nil nil 1) nil nil 2) nil nil 1) nil nil 1) nil nil 1) nil nil 1 ))))))`}$0" "Region in oldstyle" nil
                            ("Typography" "Font Alternatives")
                            ((yas/indent-line 'fixed)
                             (yas/wrap-around-region 'nil))
                            "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/h_Typography/f_Font_Alternatives/t_region_in_oldstyle.yasnippet" "C-c o s" nil)
                       (nil "{\\sc `(replace-regexp-in-string \"~\" \"\\\\\\\\textasciitilde \"\n(replace-regexp-in-string \"#\" \"\\\\\\\\#\"\n(replace-regexp-in-string \"&\" \"\\\\\\\\&\"\n(replace-regexp-in-string \"|\" \"\\\\\\\\textbar \"\n(replace-regexp-in-string \"%\" \"\\\\\\\\percent \"\n(replace-regexp-in-string \"\\\\(%\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\percent\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(|\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textbar\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(~\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textasciitilde\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([\\$]\\\\)\\\\([[:nonascii:]A-Za-z0-9]+\\\\)\" \"\\\\\\\\textdollar \"\n(replace-regexp-in-string \"\\\\([^a-zA-Z#&|]\\\\)\\\\([\\\\]+\\\\)\\\\([^a-zA-Z#&|]\\\\)\" \"\\\\\\\\letterbackslash\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quotation{\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([»\\\"“„”]\\\\)\" \"}\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quote{\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹\\'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([›\\'‘‚’]\\\\)\" \"}\"\n(yas-selected-text) nil nil 4) nil nil 2) nil nil 3) nil nil 1) nil nil 2) nil nil 1) nil nil 1) nil nil 1) nil nil 1 ))))))`}$0" "Region in smallcaps" nil
                            ("Typography" "Font Alternatives")
                            ((yas/indent-line 'fixed)
                             (yas/wrap-around-region 'nil))
                            "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/h_Typography/f_Font_Alternatives/s_region_in_smallcaps.yasnippet" "C-c s c" nil)
                       (nil "{\\it `(replace-regexp-in-string \"~\" \"\\\\\\\\textasciitilde \"\n(replace-regexp-in-string \"#\" \"\\\\\\\\#\"\n(replace-regexp-in-string \"&\" \"\\\\\\\\&\"\n(replace-regexp-in-string \"|\" \"\\\\\\\\textbar \"\n(replace-regexp-in-string \"%\" \"\\\\\\\\percent \"\n(replace-regexp-in-string \"\\\\(%\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\percent\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(|\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textbar\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(~\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textasciitilde\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([\\$]\\\\)\\\\([[:nonascii:]A-Za-z0-9]+\\\\)\" \"\\\\\\\\textdollar \"\n(replace-regexp-in-string \"\\\\([^a-zA-Z#&|]\\\\)\\\\([\\\\]+\\\\)\\\\([^a-zA-Z#&|]\\\\)\" \"\\\\\\\\letterbackslash\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quotation{\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([»\\\"“„”]\\\\)\" \"}\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quote{\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹\\'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([›\\'‘‚’]\\\\)\" \"}\"\n(yas-selected-text) nil nil 4) nil nil 2) nil nil 3) nil nil 1) nil nil 2) nil nil 1) nil nil 1) nil nil 1) nil nil 1 ))))))`}$0" "Region in italic" nil
                            ("Typography" "Font Alternatives")
                            ((yas/indent-line 'fixed)
                             (yas/wrap-around-region 'nil))
                            "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/h_Typography/f_Font_Alternatives/r_region_in_italic.yasnippet" "C-c i t" nil)
                       (nil "{\\bf `(replace-regexp-in-string \"~\" \"\\\\\\\\textasciitilde \"\n(replace-regexp-in-string \"#\" \"\\\\\\\\#\"\n(replace-regexp-in-string \"&\" \"\\\\\\\\&\"\n(replace-regexp-in-string \"|\" \"\\\\\\\\textbar \"\n(replace-regexp-in-string \"%\" \"\\\\\\\\percent \"\n(replace-regexp-in-string \"\\\\(%\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\percent\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(|\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textbar\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(~\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textasciitilde\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([\\$]\\\\)\\\\([[:nonascii:]A-Za-z0-9]+\\\\)\" \"\\\\\\\\textdollar \"\n(replace-regexp-in-string \"\\\\([^a-zA-Z#&|]\\\\)\\\\([\\\\]+\\\\)\\\\([^a-zA-Z#&|]\\\\)\" \"\\\\\\\\letterbackslash\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quotation{\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([»\\\"“„”]\\\\)\" \"}\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quote{\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹\\'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([›\\'‘‚’]\\\\)\" \"}\"\n(yas-selected-text) nil nil 4) nil nil 2) nil nil 3) nil nil 1) nil nil 2) nil nil 1) nil nil 1) nil nil 1) nil nil 1 ))))))`}$0" "Region in bold" nil
                            ("Typography" "Font Alternatives")
                            ((yas/indent-line 'fixed)
                             (yas/wrap-around-region 'nil))
                            "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/h_Typography/f_Font_Alternatives/q_region_in_bold.yasnippet" "C-c b f" nil)
                       (nil "{\\tf `(replace-regexp-in-string \"~\" \"\\\\\\\\textasciitilde \"\n(replace-regexp-in-string \"#\" \"\\\\\\\\#\"\n(replace-regexp-in-string \"&\" \"\\\\\\\\&\"\n(replace-regexp-in-string \"|\" \"\\\\\\\\textbar \"\n(replace-regexp-in-string \"%\" \"\\\\\\\\percent \"\n(replace-regexp-in-string \"\\\\(%\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\percent\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(|\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textbar\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(~\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textasciitilde\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([\\$]\\\\)\\\\([[:nonascii:]A-Za-z0-9]+\\\\)\" \"\\\\\\\\textdollar \"\n(replace-regexp-in-string \"\\\\([^a-zA-Z#&|]\\\\)\\\\([\\\\]+\\\\)\\\\([^a-zA-Z#&|]\\\\)\" \"\\\\\\\\letterbackslash\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quotation{\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([»\\\"“„”]\\\\)\" \"}\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quote{\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹\\'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([›\\'‘‚’]\\\\)\" \"}\"\n(yas-selected-text) nil nil 4) nil nil 2) nil nil 3) nil nil 1) nil nil 2) nil nil 1) nil nil 1) nil nil 1) nil nil 1 ))))))`}$0" "Region in typeface" nil
                            ("Typography" "Font Alternatives")
                            ((yas/indent-line 'fixed)
                             (yas/wrap-around-region 'nil))
                            "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/h_Typography/f_Font_Alternatives/p_region_in_typeface.yasnippet" "C-c t f" nil)
                       ("ybs" "{\\bs `(replace-regexp-in-string \"~\" \"\\\\\\\\textasciitilde \"\n(replace-regexp-in-string \"#\" \"\\\\\\\\#\"\n(replace-regexp-in-string \"&\" \"\\\\\\\\&\"\n(replace-regexp-in-string \"|\" \"\\\\\\\\textbar \"\n(replace-regexp-in-string \"%\" \"\\\\\\\\percent \"\n(replace-regexp-in-string \"\\\\(%\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\percent\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(|\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textbar\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(~\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textasciitilde\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([\\$]\\\\)\\\\([[:nonascii:]A-Za-z0-9]+\\\\)\" \"\\\\\\\\textdollar \"\n(replace-regexp-in-string \"\\\\([^a-zA-Z#&|]\\\\)\\\\([\\\\]+\\\\)\\\\([^a-zA-Z#&|]\\\\)\" \"\\\\\\\\letterbackslash\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quotation{\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([»\\\"“„”]\\\\)\" \"}\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quote{\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹\\'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([›\\'‘‚’]\\\\)\" \"}\"\n(current-kill 0) nil nil 4) nil nil 2) nil nil 3) nil nil 1) nil nil 2) nil nil 1) nil nil 1) nil nil 1) nil nil 1 ))))))`}$0" "Yank as boldslanted" nil
                        ("Typography" "Font Alternatives")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/h_Typography/f_Font_Alternatives/o_yank_as_boldslanted.yasnippet" nil nil)
                       ("ybi" "{\\bi `(replace-regexp-in-string \"~\" \"\\\\\\\\textasciitilde \"\n(replace-regexp-in-string \"#\" \"\\\\\\\\#\"\n(replace-regexp-in-string \"&\" \"\\\\\\\\&\"\n(replace-regexp-in-string \"|\" \"\\\\\\\\textbar \"\n(replace-regexp-in-string \"%\" \"\\\\\\\\percent \"\n(replace-regexp-in-string \"\\\\(%\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\percent\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(|\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textbar\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(~\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textasciitilde\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([\\$]\\\\)\\\\([[:nonascii:]A-Za-z0-9]+\\\\)\" \"\\\\\\\\textdollar \"\n(replace-regexp-in-string \"\\\\([^a-zA-Z#&|]\\\\)\\\\([\\\\]+\\\\)\\\\([^a-zA-Z#&|]\\\\)\" \"\\\\\\\\letterbackslash\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quotation{\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([»\\\"“„”]\\\\)\" \"}\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quote{\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹\\'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([›\\'‘‚’]\\\\)\" \"}\"\n(current-kill 0) nil nil 4) nil nil 2) nil nil 3) nil nil 1) nil nil 2) nil nil 1) nil nil 1) nil nil 1) nil nil 1 ))))))`}$0" "Yank as bolditalic" nil
                        ("Typography" "Font Alternatives")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/h_Typography/f_Font_Alternatives/n_yank_as_bolditalic.yasnippet" nil nil)
                       ("ysl" "{\\sl `(replace-regexp-in-string \"~\" \"\\\\\\\\textasciitilde \"\n(replace-regexp-in-string \"#\" \"\\\\\\\\#\"\n(replace-regexp-in-string \"&\" \"\\\\\\\\&\"\n(replace-regexp-in-string \"|\" \"\\\\\\\\textbar \"\n(replace-regexp-in-string \"%\" \"\\\\\\\\percent \"\n(replace-regexp-in-string \"\\\\(%\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\percent\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(|\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textbar\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(~\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textasciitilde\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([\\$]\\\\)\\\\([[:nonascii:]A-Za-z0-9]+\\\\)\" \"\\\\\\\\textdollar \"\n(replace-regexp-in-string \"\\\\([^a-zA-Z#&|]\\\\)\\\\([\\\\]+\\\\)\\\\([^a-zA-Z#&|]\\\\)\" \"\\\\\\\\letterbackslash\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quotation{\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([»\\\"“„”]\\\\)\" \"}\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quote{\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹\\'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([›\\'‘‚’]\\\\)\" \"}\"\n(current-kill 0) nil nil 4) nil nil 2) nil nil 3) nil nil 1) nil nil 2) nil nil 1) nil nil 1) nil nil 1) nil nil 1 ))))))`}$0" "Yank as slanted" nil
                        ("Typography" "Font Alternatives")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/h_Typography/f_Font_Alternatives/m_yank_as_slanted.yasnippet" nil nil)
                       ("yos" "{\\os `(replace-regexp-in-string \"~\" \"\\\\\\\\textasciitilde \"\n(replace-regexp-in-string \"#\" \"\\\\\\\\#\"\n(replace-regexp-in-string \"&\" \"\\\\\\\\&\"\n(replace-regexp-in-string \"|\" \"\\\\\\\\textbar \"\n(replace-regexp-in-string \"%\" \"\\\\\\\\percent \"\n(replace-regexp-in-string \"\\\\(%\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\percent\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(|\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textbar\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(~\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textasciitilde\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([\\$]\\\\)\\\\([[:nonascii:]A-Za-z0-9]+\\\\)\" \"\\\\\\\\textdollar \"\n(replace-regexp-in-string \"\\\\([^a-zA-Z#&|]\\\\)\\\\([\\\\]+\\\\)\\\\([^a-zA-Z#&|]\\\\)\" \"\\\\\\\\letterbackslash\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quotation{\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([»\\\"“„”]\\\\)\" \"}\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quote{\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹\\'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([›\\'‘‚’]\\\\)\" \"}\"\n(current-kill 0) nil nil 4) nil nil 2) nil nil 3) nil nil 1) nil nil 2) nil nil 1) nil nil 1) nil nil 1) nil nil 1 ))))))`}$0" "Yank as oldstyle" nil
                        ("Typography" "Font Alternatives")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/h_Typography/f_Font_Alternatives/l_yank_as_oldstyle.yasnippet" nil nil)
                       ("ysc" "{\\sc `(replace-regexp-in-string \"~\" \"\\\\\\\\textasciitilde \"\n(replace-regexp-in-string \"#\" \"\\\\\\\\#\"\n(replace-regexp-in-string \"&\" \"\\\\\\\\&\"\n(replace-regexp-in-string \"|\" \"\\\\\\\\textbar \"\n(replace-regexp-in-string \"%\" \"\\\\\\\\percent \"\n(replace-regexp-in-string \"\\\\(%\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\percent\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(|\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textbar\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(~\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textasciitilde\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([\\$]\\\\)\\\\([[:nonascii:]A-Za-z0-9]+\\\\)\" \"\\\\\\\\textdollar \"\n(replace-regexp-in-string \"\\\\([^a-zA-Z#&|]\\\\)\\\\([\\\\]+\\\\)\\\\([^a-zA-Z#&|]\\\\)\" \"\\\\\\\\letterbackslash\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quotation{\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([»\\\"“„”]\\\\)\" \"}\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quote{\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹\\'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([›\\'‘‚’]\\\\)\" \"}\"\n(current-kill 0) nil nil 4) nil nil 2) nil nil 3) nil nil 1) nil nil 2) nil nil 1) nil nil 1) nil nil 1) nil nil 1 ))))))`}$0" "Yank as smallcaps" nil
                        ("Typography" "Font Alternatives")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/h_Typography/f_Font_Alternatives/k_yank_as_smallcaps.yasnippet" nil nil)
                       ("yit" "{\\it `(replace-regexp-in-string \"~\" \"\\\\\\\\textasciitilde \"\n(replace-regexp-in-string \"#\" \"\\\\\\\\#\"\n(replace-regexp-in-string \"&\" \"\\\\\\\\&\"\n(replace-regexp-in-string \"|\" \"\\\\\\\\textbar \"\n(replace-regexp-in-string \"%\" \"\\\\\\\\percent \"\n(replace-regexp-in-string \"\\\\(%\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\percent\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(|\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textbar\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(~\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textasciitilde\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([\\$]\\\\)\\\\([[:nonascii:]A-Za-z0-9]+\\\\)\" \"\\\\\\\\textdollar \"\n(replace-regexp-in-string \"\\\\([^a-zA-Z#&|]\\\\)\\\\([\\\\]+\\\\)\\\\([^a-zA-Z#&|]\\\\)\" \"\\\\\\\\letterbackslash\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quotation{\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([»\\\"“„”]\\\\)\" \"}\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quote{\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹\\'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([›\\'‘‚’]\\\\)\" \"}\"\n(current-kill 0) nil nil 4) nil nil 2) nil nil 3) nil nil 1) nil nil 2) nil nil 1) nil nil 1) nil nil 1) nil nil 1 ))))))`}$0" "Yank as italic" nil
                        ("Typography" "Font Alternatives")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/h_Typography/f_Font_Alternatives/j_yank_as_italic.yasnippet" nil nil)
                       ("ybf" "{\\bf `(replace-regexp-in-string \"~\" \"\\\\\\\\textasciitilde \"\n(replace-regexp-in-string \"#\" \"\\\\\\\\#\"\n(replace-regexp-in-string \"&\" \"\\\\\\\\&\"\n(replace-regexp-in-string \"|\" \"\\\\\\\\textbar \"\n(replace-regexp-in-string \"%\" \"\\\\\\\\percent \"\n(replace-regexp-in-string \"\\\\(%\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\percent\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(|\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textbar\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(~\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textasciitilde\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([\\$]\\\\)\\\\([[:nonascii:]A-Za-z0-9]+\\\\)\" \"\\\\\\\\textdollar \"\n(replace-regexp-in-string \"\\\\([^a-zA-Z#&|]\\\\)\\\\([\\\\]+\\\\)\\\\([^a-zA-Z#&|]\\\\)\" \"\\\\\\\\letterbackslash\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quotation{\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([»\\\"“„”]\\\\)\" \"}\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quote{\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹\\'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([›\\'‘‚’]\\\\)\" \"}\"\n(current-kill 0) nil nil 4) nil nil 2) nil nil 3) nil nil 1) nil nil 2) nil nil 1) nil nil 1) nil nil 1) nil nil 1 ))))))`}$0" "Yank as bold" nil
                        ("Typography" "Font Alternatives")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/h_Typography/f_Font_Alternatives/j_yank_as_bold.yasnippet" nil nil)
                       ("ytf" "{\\tf `(replace-regexp-in-string \"~\" \"\\\\\\\\textasciitilde \"\n(replace-regexp-in-string \"#\" \"\\\\\\\\#\"\n(replace-regexp-in-string \"&\" \"\\\\\\\\&\"\n(replace-regexp-in-string \"|\" \"\\\\\\\\textbar \"\n(replace-regexp-in-string \"%\" \"\\\\\\\\percent \"\n(replace-regexp-in-string \"\\\\(%\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\percent\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(|\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textbar\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(~\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textasciitilde\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([\\$]\\\\)\\\\([[:nonascii:]A-Za-z0-9]+\\\\)\" \"\\\\\\\\textdollar \"\n(replace-regexp-in-string \"\\\\([^a-zA-Z#&|]\\\\)\\\\([\\\\]+\\\\)\\\\([^a-zA-Z#&|]\\\\)\" \"\\\\\\\\letterbackslash\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quotation{\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([»\\\"“„”]\\\\)\" \"}\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quote{\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹\\'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([›\\'‘‚’]\\\\)\" \"}\"\n(current-kill 0) nil nil 4) nil nil 2) nil nil 3) nil nil 1) nil nil 2) nil nil 1) nil nil 1) nil nil 1) nil nil 1 ))))))`}$0" "Yank as typeface" nil
                        ("Typography" "Font Alternatives")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/h_Typography/f_Font_Alternatives/i_yank_as_typeface.yasnippet" nil nil)
                       ("bs" "{\\bs ${1:TEXT}}$0 " "Boldslanted" nil
                        ("Typography" "Font Alternatives")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/h_Typography/f_Font_Alternatives/h_boldslanted.yasnippet" nil nil)
                       ("bi" "{\\bi ${1:TEXT}}$0 " "Bolditalic" nil
                        ("Typography" "Font Alternatives")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/h_Typography/f_Font_Alternatives/g_bolditalic.yasnippet" nil nil)
                       ("sl" "{\\sl ${1:TEXT}}$0 " "Slanted" nil
                        ("Typography" "Font Alternatives")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/h_Typography/f_Font_Alternatives/f_slanted.yasnippet" nil nil)
                       ("os" "{\\os ${1:TEXT}}$0 " "Oldstyle" nil
                        ("Typography" "Font Alternatives")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/h_Typography/f_Font_Alternatives/e_oldstyle.yasnippet" nil nil)
                       ("sc" "{\\sc ${1:TEXT}}$0 " "Smallcaps" nil
                        ("Typography" "Font Alternatives")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/h_Typography/f_Font_Alternatives/d_smallcaps.yasnippet" nil nil)
                       ("it" "{\\it ${1:TEXT}}$0 " "Italic" nil
                        ("Typography" "Font Alternatives")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/h_Typography/f_Font_Alternatives/c_italic.yasnippet" nil nil)
                       ("bf" "{\\bf ${1:TEXT}}$0 " "Bold" nil
                        ("Typography" "Font Alternatives")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/h_Typography/f_Font_Alternatives/b_bold.yasnippet" nil nil)
                       ("tf" "{\\tf ${1:TEXT}}$0 " "Typeface" nil
                        ("Typography" "Font Alternatives")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/h_Typography/f_Font_Alternatives/a_typeface.yasnippet" nil nil)))


;;; Snippet definitions:
;;;
(yas-define-snippets 'context-mode
                     '((nil "\\startalignment[${1: $$(yas/choose-value '(\"flushleft\" \"middle\" \"flushright\" \"outer\" \"inner\"))}]\n  `(replace-regexp-in-string \"[\\\\]+\" \"\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(\\\\\\\\blank\\n\\\\)\\\\{2,\\\\}\" \"\\\\\\\\blank\\n\"\n(replace-regexp-in-string \"\\\\\\\\blank\\\\\\\\par\" \"\\\\\\\\blank\"\n(replace-regexp-in-string \"\\\\\\\\par\\\\\\\\par\" \"\\\\\\\\par\"\n(replace-regexp-in-string \"\\n\" \"\\\\\\\\par\\n\"\n(replace-regexp-in-string \"\\\\(^\\\\)\\\\(\\\\s-*\\\\)\" \"\"\n(replace-regexp-in-string \"\\\\(^\\\\s-*$\\\\)\\n\" \"\\\\\\\\blank\\n\"\n(replace-regexp-in-string \"~\" \"\\\\\\\\textasciitilde \"\n(replace-regexp-in-string \"#\" \"\\\\\\\\#\"\n(replace-regexp-in-string \"&\" \"\\\\\\\\&\"\n(replace-regexp-in-string \"|\" \"\\\\\\\\textbar \"\n(replace-regexp-in-string \"%\" \"\\\\\\\\percent \"\n(replace-regexp-in-string \"\\\\(%\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\percent\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(|\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textbar\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(~\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textasciitilde\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([\\$]\\\\)\\\\([[:nonascii:]A-Za-z0-9]+\\\\)\" \"\\\\\\\\textdollar \"\n(replace-regexp-in-string \"\\\\([^a-zA-Z#&|]\\\\)\\\\([\\\\]+\\\\)\\\\([^a-zA-Z#&|]\\\\)\" \"\\\\\\\\letterbackslash\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quotation{\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([»\\\"“„”]\\\\)\" \"}\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quote{\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹\\'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([›\\'‘‚’]\\\\)\" \"}\"\n(yas-selected-text) nil nil 4) nil nil 2) nil nil 3) nil nil 1) nil nil 2) nil nil 1) nil nil 1) nil nil 1) nil nil 1 )))))))))))))`\n\\stopalignment\n$0" "Region as aligned" nil
                            ("Alignment")
                            ((yas/indent-line 'fixed)
                             (yas/wrap-around-region 'nil))
                            "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/i_Alignment/g_region_as_aligned.yasnippet" "C-c a l g" nil)
                       ("setalg" "%%%%% ALIGNMENT CONFIGURATION %%%%%%%%%%%%%%\n%% Text Alignment & Direction: ${1:$$(yas/choose-value '(\"Normal, text from left to right\" \"Normal, text from right to left\" \"Left, text from left to right\" \"Left, text from right to left\" \"Center, text from left to right\" \"Center, text from right to left\"\"Right, text from left to right\" \"Right, text from right to left\" \"Normal, text from left to right, wider lines\" \"Normal, text from right to left, wider lines\"))}\n%% Protrusion & Font Expansion: ${2:$$(yas/choose-value '( \"Allow stretching of characters, use hanging punctuation\" \"Allow stretching of characters, do not use hanging punctuation\" \"Do not allow stretching of characters, use hanging punctuation\" \"Do not allow stretching of characters, do not use hanging punctuation\"))}\n%% Hyphenation: ${3:$$(yas/choose-value '( \"Allow hyphenations\" \"Do not allow hyphenations\" \"Allow less hyphenations\" \"Allow more hyphenations\"))}\n%% Space Stretching: ${4:$$(yas/choose-value '(\"Use default settings\" \"Allow tolerant stretching\" \"Allow very tolerant stretching\"))}\n\\setupalign[${1:$(cond ((string-equal \"Normal, text from left to right\" yas-text) (concat \"normal, \")) ((string-equal \"Normal, text from right to left\" yas-text) (concat \"normal, righttoleft, \")) ((string-equal \"Left, text from left to right\" yas-text) (concat \"flushleft, \")) ((string-equal \"Left, text from right to left\" yas-text) (concat \"flushleft, righttoleft, \"))((string-equal \"Center, text from left to right\" yas-text) (concat \"middle, \")) ((string-equal \"Center, text from right to left\" yas-text) (concat \"middle, righttoleft, \")) ((string-equal \"Right, text from left to right\" yas-text) (concat \"flushright, \")) ((string-equal \"Right, text from right to left\" yas-text) (concat \"flushright, righttoleft, \")) ((string-equal \"Normal, text from left to right, wider lines\" yas-text) (concat \"normal, wide, \")) ((string-equal \"Normal, text from right to left, wider lines\" yas-text) (concat \"normal, righttoleft, wide, \")))}${2:$(cond ((string-equal \"Allow stretching of characters, use hanging punctuation\" yas-text) (concat \"hz, hanging, \"))((string-equal \"Allow stretching of characters, do not use hanging punctuation\" yas-text) (concat \"hz, nohanging, \"))((string-equal \"Do not allow stretching of characters, use hanging punctuation\" yas-text) (concat \"nohz, hanging, \"))((string-equal \"Do not allow stretching of characters, do not use hanging punctuation\" yas-text) (concat \"nohz, nohanging, \")))}${3:$(cond  ((string-equal \"Allow hyphenations\" yas-text) (concat \"hyphenated\")) ((string-equal \"Do not allow hyphenations\" yas-text) (concat \"nothyphenated\")) ((string-equal \"Allow less hyphenations\" yas-text) (concat \"lesshyphenation\")) ((string-equal \"Allow more hyphenations\" yas-text) (concat \"morehyphenation\")))}${4:$(cond ((string-equal \"Use default settings\" yas-text) (concat \"\")) ((string-equal \"Allow tolerant stretching\" yas-text) (concat \", tolerant, stretch\")) ((string-equal \"Allow very tolerant stretching\" yas-text) (concat \", verytolerant, stretch\")))}]\n%%%%% END OF CONFIGURATION %%%%%%%%%%%%%%%%%%%%%%\n$0" "Setup alignment" nil
                        ("Alignment")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/i_Alignment/f_setup_alignment.yasnippet" nil nil)
                       ("algenv" "\\startalignment[${1: $$(yas/choose-value '(\"flushleft\" \"middle\" \"flushright\" \"outer\" \"inner\"))}]\n  $0\n\\stopalignment" "Align environment" nil
                        ("Alignment")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/i_Alignment/e_align_environment.yasnippet" nil nil)
                       ("rwalg" "\\wordright{${1:CONTENT}}$0" "Right-align a word" nil
                        ("Alignment")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/i_Alignment/d_right_align_a_word.yasnippet" nil nil)
                       ("ralg" "\\rightaligned{${1:CONTENT}}$0" "Right-alignment" nil
                        ("Alignment")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/i_Alignment/c_right_alignment.yasnippet" nil nil)
                       ("malg" "\\midaligned{${1:CONTENT}}$0" "Center-alignment" nil
                        ("Alignment")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/i_Alignment/b_center_alignment.yasnippet" nil nil)
                       ("lalg" "\\leftaligned{${1:CONTENT}}$0" "Left-alignment" nil
                        ("Alignment")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/i_Alignment/a_left_alignment.yasnippet" nil nil)))


;;; Snippet definitions:
;;;
(yas-define-snippets 'context-mode
                     '((nil "\\startunpacked\n  `(replace-regexp-in-string \"[\\\\]+\" \"\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(\\\\\\\\blank\\n\\\\)\\\\{2,\\\\}\" \"\\\\\\\\blank\\n\"\n(replace-regexp-in-string \"\\\\\\\\blank\\\\\\\\par\" \"\\\\\\\\blank\"\n(replace-regexp-in-string \"\\\\\\\\par\\\\\\\\par\" \"\\\\\\\\par\"\n(replace-regexp-in-string \"\\n\" \"\\\\\\\\par\\n\"\n(replace-regexp-in-string \"\\\\(^\\\\)\\\\(\\\\s-*\\\\)\" \"\"\n(replace-regexp-in-string \"\\\\(^\\\\s-*$\\\\)\\n\" \"\\\\\\\\blank\\n\"\n(replace-regexp-in-string \"~\" \"\\\\\\\\textasciitilde \"\n(replace-regexp-in-string \"#\" \"\\\\\\\\#\"\n(replace-regexp-in-string \"&\" \"\\\\\\\\&\"\n(replace-regexp-in-string \"|\" \"\\\\\\\\textbar \"\n(replace-regexp-in-string \"%\" \"\\\\\\\\percent \"\n(replace-regexp-in-string \"\\\\(%\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\percent\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(|\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textbar\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(~\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textasciitilde\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([\\$]\\\\)\\\\([[:nonascii:]A-Za-z0-9]+\\\\)\" \"\\\\\\\\textdollar \"\n(replace-regexp-in-string \"\\\\([^a-zA-Z#&|]\\\\)\\\\([\\\\]+\\\\)\\\\([^a-zA-Z#&|]\\\\)\" \"\\\\\\\\letterbackslash\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quotation{\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([»\\\"“„”]\\\\)\" \"}\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quote{\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹\\'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([›\\'‘‚’]\\\\)\" \"}\"\n(yas-selected-text) nil nil 4) nil nil 2) nil nil 3) nil nil 1) nil nil 2) nil nil 1) nil nil 1) nil nil 1) nil nil 1 )))))))))))))`\n\\stopunpacked $0" "Region as unpacked" nil
                            ("Paragraphs")
                            ((yas/indent-line 'fixed)
                             (yas/wrap-around-region 'nil))
                            "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/j_Paragraphs/m_region_as_unpacked.yasnippet" "C-c u p" nil)
                       (nil "\\startpacked\n  `(replace-regexp-in-string \"[\\\\]+\" \"\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(\\\\\\\\blank\\n\\\\)\\\\{2,\\\\}\" \"\\\\\\\\blank\\n\"\n(replace-regexp-in-string \"\\\\\\\\blank\\\\\\\\par\" \"\\\\\\\\blank\"\n(replace-regexp-in-string \"\\\\\\\\par\\\\\\\\par\" \"\\\\\\\\par\"\n(replace-regexp-in-string \"\\n\" \"\\\\\\\\par\\n\"\n(replace-regexp-in-string \"\\\\(^\\\\)\\\\(\\\\s-*\\\\)\" \"\"\n(replace-regexp-in-string \"\\\\(^\\\\s-*$\\\\)\\n\" \"\\\\\\\\blank\\n\"\n(replace-regexp-in-string \"~\" \"\\\\\\\\textasciitilde \"\n(replace-regexp-in-string \"#\" \"\\\\\\\\#\"\n(replace-regexp-in-string \"&\" \"\\\\\\\\&\"\n(replace-regexp-in-string \"|\" \"\\\\\\\\textbar \"\n(replace-regexp-in-string \"%\" \"\\\\\\\\percent \"\n(replace-regexp-in-string \"\\\\(%\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\percent\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(|\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textbar\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(~\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textasciitilde\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([\\$]\\\\)\\\\([[:nonascii:]A-Za-z0-9]+\\\\)\" \"\\\\\\\\textdollar \"\n(replace-regexp-in-string \"\\\\([^a-zA-Z#&|]\\\\)\\\\([\\\\]+\\\\)\\\\([^a-zA-Z#&|]\\\\)\" \"\\\\\\\\letterbackslash\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quotation{\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([»\\\"“„”]\\\\)\" \"}\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quote{\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹\\'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([›\\'‘‚’]\\\\)\" \"}\"\n(yas-selected-text) nil nil 4) nil nil 2) nil nil 3) nil nil 1) nil nil 2) nil nil 1) nil nil 1) nil nil 1) nil nil 1 )))))))))))))`\n\\stoppacked $0" "Region as packed" nil
                            ("Paragraphs")
                            ((yas/indent-line 'fixed)
                             (yas/wrap-around-region 'nil))
                            "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/j_Paragraphs/l_region_as_packed.yasnippet" "C-c p k" nil)
                       (nil "\\startnarrower[${1:NUMBER }*left, ${2:NUMBER }*right]\n  `(replace-regexp-in-string \"[\\\\]+\" \"\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(\\\\\\\\blank\\n\\\\)\\\\{2,\\\\}\" \"\\\\\\\\blank\\n\"\n(replace-regexp-in-string \"\\\\\\\\blank\\\\\\\\par\" \"\\\\\\\\blank\"\n(replace-regexp-in-string \"\\\\\\\\par\\\\\\\\par\" \"\\\\\\\\par\"\n(replace-regexp-in-string \"\\n\" \"\\\\\\\\par\\n\"\n(replace-regexp-in-string \"\\\\(^\\\\)\\\\(\\\\s-*\\\\)\" \"\"\n(replace-regexp-in-string \"\\\\(^\\\\s-*$\\\\)\\n\" \"\\\\\\\\blank\\n\"\n(replace-regexp-in-string \"~\" \"\\\\\\\\textasciitilde \"\n(replace-regexp-in-string \"#\" \"\\\\\\\\#\"\n(replace-regexp-in-string \"&\" \"\\\\\\\\&\"\n(replace-regexp-in-string \"|\" \"\\\\\\\\textbar \"\n(replace-regexp-in-string \"%\" \"\\\\\\\\percent \"\n(replace-regexp-in-string \"\\\\(%\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\percent\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(|\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textbar\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(~\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textasciitilde\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([\\$]\\\\)\\\\([[:nonascii:]A-Za-z0-9]+\\\\)\" \"\\\\\\\\textdollar \"\n(replace-regexp-in-string \"\\\\([^a-zA-Z#&|]\\\\)\\\\([\\\\]+\\\\)\\\\([^a-zA-Z#&|]\\\\)\" \"\\\\\\\\letterbackslash\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quotation{\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([»\\\"“„”]\\\\)\" \"}\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quote{\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹\\'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([›\\'‘‚’]\\\\)\" \"}\"\n(yas-selected-text) nil nil 4) nil nil 2) nil nil 3) nil nil 1) nil nil 2) nil nil 1) nil nil 1) nil nil 1) nil nil 1 )))))))))))))`\n\\stopnarrower $0" "Region as narrower" nil
                            ("Paragraphs")
                            ((yas/indent-line 'fixed)
                             (yas/wrap-around-region 'nil))
                            "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/j_Paragraphs/k_region_as_narrower.yasnippet" "C-c n r" nil)
                       ("actind" "%%%%% INDENTATION ACTIVATION %%%%%%%%%%%%%%%%%%%%\n\\setupindenting\n  [${1:$$(yas/choose-value '(\"yes, small\" \"yes, medium\" \"yes, big\" \"yes, 0.5cm\" \"yes, 1cm\" \"yes, 1.5cm\" \"yes, 2cm\" \"yes, 2.5cm\" \"yes, 3cm\" \"never\" \"none\" \"not\" \"no\" \"yes\" \"always\" \"first\" \"next\" \"small\" \"medium\" \"big\" \"normal\" \"odd\" \"even\"))}]\n%%%%% END OF ACTIVATION %%%%%%%%%%%%%%%%%%%%%%%%%\n$0" "Activate indentations" nil
                        ("Paragraphs")
                        nil "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/j_Paragraphs/j_activate_indentations.yasnippet" nil nil)
                       ("nind" "\\noindentation$0" "No indentation" nil
                        ("Paragraphs")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/j_Paragraphs/i_no_indentation.yasnippet" nil nil)
                       ("yupck" "\\startunpacked\n  `(replace-regexp-in-string \"[\\\\]+\" \"\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(\\\\\\\\blank\\n\\\\)\\\\{2,\\\\}\" \"\\\\\\\\blank\\n\"\n(replace-regexp-in-string \"\\\\\\\\blank\\\\\\\\par\" \"\\\\\\\\blank\"\n(replace-regexp-in-string \"\\\\\\\\par\\\\\\\\par\" \"\\\\\\\\par\"\n(replace-regexp-in-string \"\\n\" \"\\\\\\\\par\\n\"\n(replace-regexp-in-string \"\\\\(^\\\\)\\\\(\\\\s-*\\\\)\" \"\"\n(replace-regexp-in-string \"\\\\(^\\\\s-*$\\\\)\\n\" \"\\\\\\\\blank\\n\"\n(replace-regexp-in-string \"~\" \"\\\\\\\\textasciitilde \"\n(replace-regexp-in-string \"#\" \"\\\\\\\\#\"\n(replace-regexp-in-string \"&\" \"\\\\\\\\&\"\n(replace-regexp-in-string \"|\" \"\\\\\\\\textbar \"\n(replace-regexp-in-string \"%\" \"\\\\\\\\percent \"\n(replace-regexp-in-string \"\\\\(%\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\percent\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(|\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textbar\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(~\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textasciitilde\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([\\$]\\\\)\\\\([[:nonascii:]A-Za-z0-9]+\\\\)\" \"\\\\\\\\textdollar \"\n(replace-regexp-in-string \"\\\\([^a-zA-Z#&|]\\\\)\\\\([\\\\]+\\\\)\\\\([^a-zA-Z#&|]\\\\)\" \"\\\\\\\\letterbackslash\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quotation{\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([»\\\"“„”]\\\\)\" \"}\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quote{\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹\\'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([›\\'‘‚’]\\\\)\" \"}\"\n(current-kill 0) nil nil 4) nil nil 2) nil nil 3) nil nil 1) nil nil 2) nil nil 1) nil nil 1) nil nil 1) nil nil 1 )))))))))))))`\n\\stopunpacked\n$0" "Yank as unpacked" nil
                        ("Paragraphs")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/j_Paragraphs/h_yank_as_unpacked.yasnippet" nil nil)
                       ("ypck" "\\startpacked\n  `(replace-regexp-in-string \"[\\\\]+\" \"\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(\\\\\\\\blank\\n\\\\)\\\\{2,\\\\}\" \"\\\\\\\\blank\\n\"\n(replace-regexp-in-string \"\\\\\\\\blank\\\\\\\\par\" \"\\\\\\\\blank\"\n(replace-regexp-in-string \"\\\\\\\\par\\\\\\\\par\" \"\\\\\\\\par\"\n(replace-regexp-in-string \"\\n\" \"\\\\\\\\par\\n\"\n(replace-regexp-in-string \"\\\\(^\\\\)\\\\(\\\\s-*\\\\)\" \"\"\n(replace-regexp-in-string \"\\\\(^\\\\s-*$\\\\)\\n\" \"\\\\\\\\blank\\n\"\n(replace-regexp-in-string \"~\" \"\\\\\\\\textasciitilde \"\n(replace-regexp-in-string \"#\" \"\\\\\\\\#\"\n(replace-regexp-in-string \"&\" \"\\\\\\\\&\"\n(replace-regexp-in-string \"|\" \"\\\\\\\\textbar \"\n(replace-regexp-in-string \"%\" \"\\\\\\\\percent \"\n(replace-regexp-in-string \"\\\\(%\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\percent\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(|\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textbar\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(~\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textasciitilde\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([\\$]\\\\)\\\\([[:nonascii:]A-Za-z0-9]+\\\\)\" \"\\\\\\\\textdollar \"\n(replace-regexp-in-string \"\\\\([^a-zA-Z#&|]\\\\)\\\\([\\\\]+\\\\)\\\\([^a-zA-Z#&|]\\\\)\" \"\\\\\\\\letterbackslash\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quotation{\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([»\\\"“„”]\\\\)\" \"}\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quote{\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹\\'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([›\\'‘‚’]\\\\)\" \"}\"\n(current-kill 0) nil nil 4) nil nil 2) nil nil 3) nil nil 1) nil nil 2) nil nil 1) nil nil 1) nil nil 1) nil nil 1 )))))))))))))`\n\\stoppacked\n$0" "Yank as packed" nil
                        ("Paragraphs")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/j_Paragraphs/g_yank_as_packed.yasnippet" nil nil)
                       ("ynar" "\\startnarrower[${1:NUMBER }*left, ${2:NUMBER }*right]\n  `(replace-regexp-in-string \"[\\\\]+\" \"\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(\\\\\\\\blank\\n\\\\)\\\\{2,\\\\}\" \"\\\\\\\\blank\\n\"\n(replace-regexp-in-string \"\\\\\\\\blank\\\\\\\\par\" \"\\\\\\\\blank\"\n(replace-regexp-in-string \"\\\\\\\\par\\\\\\\\par\" \"\\\\\\\\par\"\n(replace-regexp-in-string \"\\n\" \"\\\\\\\\par\\n\"\n(replace-regexp-in-string \"\\\\(^\\\\)\\\\(\\\\s-*\\\\)\" \"\"\n(replace-regexp-in-string \"\\\\(^\\\\s-*$\\\\)\\n\" \"\\\\\\\\blank\\n\"\n(replace-regexp-in-string \"~\" \"\\\\\\\\textasciitilde \"\n(replace-regexp-in-string \"#\" \"\\\\\\\\#\"\n(replace-regexp-in-string \"&\" \"\\\\\\\\&\"\n(replace-regexp-in-string \"|\" \"\\\\\\\\textbar \"\n(replace-regexp-in-string \"%\" \"\\\\\\\\percent \"\n(replace-regexp-in-string \"\\\\(%\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\percent\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(|\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textbar\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(~\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textasciitilde\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([\\$]\\\\)\\\\([[:nonascii:]A-Za-z0-9]+\\\\)\" \"\\\\\\\\textdollar \"\n(replace-regexp-in-string \"\\\\([^a-zA-Z#&|]\\\\)\\\\([\\\\]+\\\\)\\\\([^a-zA-Z#&|]\\\\)\" \"\\\\\\\\letterbackslash\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quotation{\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([»\\\"“„”]\\\\)\" \"}\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quote{\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹\\'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([›\\'‘‚’]\\\\)\" \"}\"\n(current-kill 0) nil nil 4) nil nil 2) nil nil 3) nil nil 1) nil nil 2) nil nil 1) nil nil 1) nil nil 1) nil nil 1 )))))))))))))`\n\\stopnarrower\n$0" "Yank as narrower" nil
                        ("Paragraphs")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/j_Paragraphs/f_yank_as_narrower.yasnippet" nil nil)
                       ("upck" "\\startunpacked\n  $0\n\\stopunpacked" "Unpacked" nil
                        ("Paragraphs")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/j_Paragraphs/e_unpacked.yasnippet" nil nil)
                       ("pck" "\\startpacked\n  $0\n\\stoppacked" "Packed" nil
                        ("Paragraphs")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/j_Paragraphs/d_packed.yasnippet" nil nil)
                       ("nar" "\\startnarrower[${1:NUMBER }*left, ${2:NUMBER }*right]\n  $0\n\\stopnarrower" "Narrower" nil
                        ("Paragraphs")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/j_Paragraphs/c_narrower.yasnippet" nil nil)
                       ("pb" "\\par\\blank$0" "Paragraph end & blank" nil
                        ("Paragraphs")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/j_Paragraphs/b_paragraph_end_and_blank.yasnippet" nil nil)
                       ("p" "\\par$0" "Paragraph end" nil
                        ("Paragraphs")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/j_Paragraphs/a_paragraph_end.yasnippet" nil nil)))


;;; Snippet definitions:
;;;
(yas-define-snippets 'context-mode
                     '((nil "\\start${1:$$(yas/choose-value'(\"section\" \"subsection\" \"subsubsection\" \"subject\" \"subsubject\" \"subsubsubject\" \"chapter\" \"title\"))}[title={${2:TITLE}},list={$2},reference={$1:${2:$(replace-regexp-in-string \"[ ]+\" \"\" (capitalize (replace-regexp-in-string \"[^[:nonascii:]a-z0-9A-Z]\" \" \" yas-text)))}}]${1:$(let ((f1 (yas-field-value 1)))(if (or (string-equal \"chapter\" f1)(string-equal \"title\" f1)) (concat \"\\n\")))}\n`(replace-regexp-in-string \"[\\\\]+\" \"\\\\\\\\\"\n(replace-regexp-in-string \"[\\n]+\" \"\\n\\n\"\n(replace-regexp-in-string \"^\\\\\\\\par\\\\\\\\blank$\" \"\"\n(replace-regexp-in-string \"\\n\" \"\\\\\\\\par\\\\\\\\blank\\n\"\n(replace-regexp-in-string \"\\\\(^\\\\)\\\\(\\\\s-*\\\\)\" \"\"\n(replace-regexp-in-string \"~\" \"\\\\\\\\textasciitilde \"\n(replace-regexp-in-string \"#\" \"\\\\\\\\#\"\n(replace-regexp-in-string \"&\" \"\\\\\\\\&\"\n(replace-regexp-in-string \"|\" \"\\\\\\\\textbar \"\n(replace-regexp-in-string \"%\" \"\\\\\\\\percent \"\n(replace-regexp-in-string \"\\\\(%\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\percent\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(|\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textbar\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(~\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textasciitilde\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([\\$]\\\\)\\\\([[:nonascii:]A-Za-z0-9]+\\\\)\" \"\\\\\\\\textdollar \"\n(replace-regexp-in-string \"\\\\([^a-zA-Z#&|]\\\\)\\\\([\\\\]+\\\\)\\\\([^a-zA-Z#&|]\\\\)\" \"\\\\\\\\letterbackslash\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quotation{\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([»\\\"“„”]\\\\)\" \"}\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quote{\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹\\'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([›\\'‘‚’]\\\\)\" \"}\"\n(yas-selected-text) nil nil 4) nil nil 2) nil nil 3) nil nil 1) nil nil 2) nil nil 1) nil nil 1) nil nil 1) nil nil 1 )))))))))))`${1:$(let ((f1 (yas-field-value 1)))(if (or (string-equal \"chapter\" f1)(string-equal \"title\" f1)) (concat \"\\n\")))}\n\\stop$1\n$0" "Region as spacious sectioning" nil
                            ("Sectioning")
                            ((yas/indent-line 'fixed)
                             (yas/wrap-around-region 'nil))
                            "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/k_Sectioning/h_region_as_spacious_sectioning.yasnippet" "C-c s s" nil)
                       (nil "\\start${1:$$(yas/choose-value'(\"section\" \"subsection\" \"subsubsection\" \"subject\" \"subsubject\" \"subsubsubject\" \"chapter\" \"title\"))}[title={${2:TITLE}},list={$2},reference={$1:${2:$(replace-regexp-in-string \"[ ]+\" \"\" (capitalize (replace-regexp-in-string \"[^[:nonascii:]a-z0-9A-Z]\" \" \" yas-text)))}}]${1:$(let ((f1 (yas-field-value 1)))(if (or (string-equal \"chapter\" f1)(string-equal \"title\" f1)) (concat \"\\n\")))}\n`(replace-regexp-in-string \"[\\\\]+\" \"\\\\\\\\\"\n(replace-regexp-in-string \"[\\n]+\" \"\\n\\n\"\n(replace-regexp-in-string \"^\\\\\\\\par$\" \"\"\n(replace-regexp-in-string \"\\n\" \"\\\\\\\\par\\n\"\n(replace-regexp-in-string \"\\\\(^\\\\)\\\\(\\\\s-*\\\\)\" \"\"\n(replace-regexp-in-string \"~\" \"\\\\\\\\textasciitilde \"\n(replace-regexp-in-string \"#\" \"\\\\\\\\#\"\n(replace-regexp-in-string \"&\" \"\\\\\\\\&\"\n(replace-regexp-in-string \"|\" \"\\\\\\\\textbar \"\n(replace-regexp-in-string \"%\" \"\\\\\\\\percent \"\n(replace-regexp-in-string \"\\\\(%\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\percent\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(|\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textbar\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(~\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textasciitilde\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([\\$]\\\\)\\\\([[:nonascii:]A-Za-z0-9]+\\\\)\" \"\\\\\\\\textdollar \"\n(replace-regexp-in-string \"\\\\([^a-zA-Z#&|]\\\\)\\\\([\\\\]+\\\\)\\\\([^a-zA-Z#&|]\\\\)\" \"\\\\\\\\letterbackslash\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quotation{\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([»\\\"“„”]\\\\)\" \"}\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quote{\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹\\'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([›\\'‘‚’]\\\\)\" \"}\"\n(yas-selected-text) nil nil 4) nil nil 2) nil nil 3) nil nil 1) nil nil 2) nil nil 1) nil nil 1) nil nil 1) nil nil 1 )))))))))))`${1:$(let ((f1 (yas-field-value 1)))(if (or (string-equal \"chapter\" f1)(string-equal \"title\" f1)) (concat \"\\n\")))}\n\\stop$1\n$0" "Region as compact sectioning" nil
                            ("Sectioning")
                            ((yas/indent-line 'fixed)
                             (yas/wrap-around-region 'nil))
                            "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/k_Sectioning/g_region_as_compact_sectioning.yasnippet" "C-c c s" nil)
                       ("yss" "\\start${1:$$(yas/choose-value'(\"section\" \"subsection\" \"subsubsection\" \"subject\" \"subsubject\" \"subsubsubject\" \"chapter\" \"title\"))}[title={${2:TITLE}},list={$2},reference={$1:${2:$(replace-regexp-in-string \"[ ]+\" \"\" (capitalize (replace-regexp-in-string \"[^[:nonascii:]a-z0-9A-Z]\" \" \" yas-text)))}}]${1:$(let ((f1 (yas-field-value 1)))(if (or (string-equal \"chapter\" f1)(string-equal \"title\" f1)) (concat \"\\n\")))}\n`(replace-regexp-in-string \"[\\\\]+\" \"\\\\\\\\\"\n(replace-regexp-in-string \"[\\n]+\" \"\\n\\n\"\n(replace-regexp-in-string \"^\\\\\\\\par\\\\\\\\blank$\" \"\"\n(replace-regexp-in-string \"\\n\" \"\\\\\\\\par\\\\\\\\blank\\n\"\n(replace-regexp-in-string \"\\\\(^\\\\)\\\\(\\\\s-*\\\\)\" \"\"\n(replace-regexp-in-string \"~\" \"\\\\\\\\textasciitilde \"\n(replace-regexp-in-string \"#\" \"\\\\\\\\#\"\n(replace-regexp-in-string \"&\" \"\\\\\\\\&\"\n(replace-regexp-in-string \"|\" \"\\\\\\\\textbar \"\n(replace-regexp-in-string \"%\" \"\\\\\\\\percent \"\n(replace-regexp-in-string \"\\\\(%\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\percent\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(|\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textbar\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(~\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textasciitilde\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([\\$]\\\\)\\\\([[:nonascii:]A-Za-z0-9]+\\\\)\" \"\\\\\\\\textdollar \"\n(replace-regexp-in-string \"\\\\([^a-zA-Z#&|]\\\\)\\\\([\\\\]+\\\\)\\\\([^a-zA-Z#&|]\\\\)\" \"\\\\\\\\letterbackslash\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quotation{\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([»\\\"“„”]\\\\)\" \"}\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quote{\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹\\'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([›\\'‘‚’]\\\\)\" \"}\"\n(current-kill 0) nil nil 4) nil nil 2) nil nil 3) nil nil 1) nil nil 2) nil nil 1) nil nil 1) nil nil 1) nil nil 1 )))))))))))`${1:$(let ((f1 (yas-field-value 1)))(if (or (string-equal \"chapter\" f1)(string-equal \"title\" f1)) (concat \"\\n\")))}\n\\stop$1\n$0" "Yank as spacious sectioning" nil
                        ("Sectioning")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/k_Sectioning/f_yank_as_spacious_sectioning.yasnippet" nil nil)
                       ("ycs" "\\start${1:$$(yas/choose-value'(\"section\" \"subsection\" \"subsubsection\" \"subject\" \"subsubject\" \"subsubsubject\" \"chapter\" \"title\"))}[title={${2:TITLE}},list={$2},reference={$1:${2:$(replace-regexp-in-string \"[ ]+\" \"\" (capitalize (replace-regexp-in-string \"[^[:nonascii:]a-z0-9A-Z]\" \" \" yas-text)))}}]${1:$(let ((f1 (yas-field-value 1)))(if (or (string-equal \"chapter\" f1)(string-equal \"title\" f1)) (concat \"\\n\")))}\n`(replace-regexp-in-string \"[\\\\]+\" \"\\\\\\\\\"\n(replace-regexp-in-string \"[\\n]+\" \"\\n\\n\"\n(replace-regexp-in-string \"^\\\\\\\\par$\" \"\"\n(replace-regexp-in-string \"\\n\" \"\\\\\\\\par\\n\"\n(replace-regexp-in-string \"\\\\(^\\\\)\\\\(\\\\s-*\\\\)\" \"\"\n(replace-regexp-in-string \"~\" \"\\\\\\\\textasciitilde \"\n(replace-regexp-in-string \"#\" \"\\\\\\\\#\"\n(replace-regexp-in-string \"&\" \"\\\\\\\\&\"\n(replace-regexp-in-string \"|\" \"\\\\\\\\textbar \"\n(replace-regexp-in-string \"%\" \"\\\\\\\\percent \"\n(replace-regexp-in-string \"\\\\(%\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\percent\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(|\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textbar\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(~\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textasciitilde\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([\\$]\\\\)\\\\([[:nonascii:]A-Za-z0-9]+\\\\)\" \"\\\\\\\\textdollar \"\n(replace-regexp-in-string \"\\\\([^a-zA-Z#&|]\\\\)\\\\([\\\\]+\\\\)\\\\([^a-zA-Z#&|]\\\\)\" \"\\\\\\\\letterbackslash\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quotation{\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([»\\\"“„”]\\\\)\" \"}\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quote{\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹\\'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([›\\'‘‚’]\\\\)\" \"}\"\n(current-kill 0) nil nil 4) nil nil 2) nil nil 3) nil nil 1) nil nil 2) nil nil 1) nil nil 1) nil nil 1) nil nil 1 )))))))))))`${1:$(let ((f1 (yas-field-value 1)))(if (or (string-equal \"chapter\" f1)(string-equal \"title\" f1)) (concat \"\\n\")))}\n\\stop$1\n$0" "Yank as compact sectioning" nil
                        ("Sectioning")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/k_Sectioning/e_yank_as_compact_sectioning.yasnippet" nil nil)
                       ("sub" "\\start${1:$$(yas/choose-value'(\"subject\" \"subsubject\" \"subsubsubject\"))}[title={${2:TITLE}},list={$2},reference={$1:${2:$(replace-regexp-in-string \"[ ]+\" \"\" (capitalize (replace-regexp-in-string \"[^[:nonascii:]a-z0-9A-Z]\" \" \" yas-text)))}}]\n  $0\n\\stop$1" "Subject (unnumbered)" nil
                        ("Sectioning")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/k_Sectioning/d_subject.yasnippet" nil nil)
                       ("sec" "\\start${1:$$(yas/choose-value'(\"section\" \"subsection\" \"subsubsection\"))}[title={${2:TITLE}},list={$2},reference={$1:${2:$(replace-regexp-in-string \"[ ]+\" \"\" (capitalize (replace-regexp-in-string \"[^[:nonascii:]a-z0-9A-Z]\" \" \" yas-text)))}}]\n  $0\n\\stop$1" "Section (numbered)" nil
                        ("Sectioning")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/k_Sectioning/c_section.yasnippet" nil nil)
                       ("ttl" "\\starttitle[title={${1:TITLE}},list={$1},reference={title:${1:$(replace-regexp-in-string \"[ ]+\" \"\" (capitalize (replace-regexp-in-string \"[^[:nonascii:]a-z0-9A-Z]\" \" \" yas-text)))}}]\n\n$0\n\n\\stoptitle" "Title (unnumbered)" nil
                        ("Sectioning")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/k_Sectioning/b_title.yasnippet" nil nil)
                       ("chp" "\\startchapter[title={${1:TITLE}},list={$1},reference={chapter:${1:$(replace-regexp-in-string \"[ ]+\" \"\" (capitalize (replace-regexp-in-string \"[^[:nonascii:]a-z0-9A-Z]\" \" \" yas-text)))}}]\n\n$0\n\n\\stopchapter" "Chapter (numbered)" nil
                        ("Sectioning")
                        ((yas/indent-line 'nil)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/k_Sectioning/a_chapter.yasnippet" nil nil)))


;;; Snippet definitions:
;;;
(yas-define-snippets 'context-mode
                     '((nil "`(replace-regexp-in-string \"[\\\\]+\" \"\\\\\\\\\"\n(replace-regexp-in-string \"[\\n]+\" \"\\n\\n\"\n(replace-regexp-in-string \"^\\\\\\\\par\\\\\\\\blank$\" \"\"\n(replace-regexp-in-string \"\\n\" \"\\\\\\\\par\\\\\\\\blank\\n\"\n(replace-regexp-in-string \"\\\\(^\\\\)\\\\(\\\\s-*\\\\)\" \"\"\n(replace-regexp-in-string \"~\" \"\\\\\\\\textasciitilde \"\n(replace-regexp-in-string \"#\" \"\\\\\\\\#\"\n(replace-regexp-in-string \"&\" \"\\\\\\\\&\"\n(replace-regexp-in-string \"|\" \"\\\\\\\\textbar \"\n(replace-regexp-in-string \"%\" \"\\\\\\\\percent \"\n(replace-regexp-in-string \"\\\\(%\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\percent\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(|\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textbar\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(~\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textasciitilde\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([\\$]\\\\)\\\\([[:nonascii:]A-Za-z0-9]+\\\\)\" \"\\\\\\\\textdollar \"\n(replace-regexp-in-string \"\\\\([^a-zA-Z#&|]\\\\)\\\\([\\\\]+\\\\)\\\\([^a-zA-Z#&|]\\\\)\" \"\\\\\\\\letterbackslash\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quotation{\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([»\\\"“„”]\\\\)\" \"}\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quote{\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹\\'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([›\\'‘‚’]\\\\)\" \"}\"\n(yas-selected-text) nil nil 4) nil nil 2) nil nil 3) nil nil 1) nil nil 2) nil nil 1) nil nil 1) nil nil 1) nil nil 1 )))))))))))`$0" "Region as spacious text" nil
                            ("General")
                            ((yas/indent-line 'fixed)
                             (yas/wrap-around-region 'nil))
                            "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/l_General/i_region_as_spacious_text.yasnippet" "C-c s t" nil)
                       (nil "`(replace-regexp-in-string \"[\\\\]+\" \"\\\\\\\\\"\n(replace-regexp-in-string \"[\\n]+\" \"\\n\\n\"\n(replace-regexp-in-string \"^\\\\\\\\par$\" \"\"\n(replace-regexp-in-string \"\\n\" \"\\\\\\\\par\\n\"\n(replace-regexp-in-string \"\\\\(^\\\\)\\\\(\\\\s-*\\\\)\" \"\"\n(replace-regexp-in-string \"~\" \"\\\\\\\\textasciitilde \"\n(replace-regexp-in-string \"#\" \"\\\\\\\\#\"\n(replace-regexp-in-string \"&\" \"\\\\\\\\&\"\n(replace-regexp-in-string \"|\" \"\\\\\\\\textbar \"\n(replace-regexp-in-string \"%\" \"\\\\\\\\percent \"\n(replace-regexp-in-string \"\\\\(%\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\percent\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(|\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textbar\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(~\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textasciitilde\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([\\$]\\\\)\\\\([[:nonascii:]A-Za-z0-9]+\\\\)\" \"\\\\\\\\textdollar \"\n(replace-regexp-in-string \"\\\\([^a-zA-Z#&|]\\\\)\\\\([\\\\]+\\\\)\\\\([^a-zA-Z#&|]\\\\)\" \"\\\\\\\\letterbackslash\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quotation{\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([»\\\"“„”]\\\\)\" \"}\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quote{\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹\\'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([›\\'‘‚’]\\\\)\" \"}\"\n(yas-selected-text) nil nil 4) nil nil 2) nil nil 3) nil nil 1) nil nil 2) nil nil 1) nil nil 1) nil nil 1) nil nil 1 )))))))))))`$0" "Region as compact text" nil
                            ("General")
                            ((yas/indent-line 'fixed)
                             (yas/wrap-around-region 'nil))
                            "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/l_General/h_region_as_compact_text.yasnippet" "C-c c t" nil)
                       ("tass" "${4:${1:$(replace-regexp-in-string \"^\\\\\\\\(edef\\\\\\\\|xdef\\\\\\\\|gdef\\\\\\\\)$\" \"\" (replace-regexp-in-string \"^def$\" \"\\\\\\\\\\\\\\unexpanded\" yas-text) nil nil 1)}}\\\\${1:$$(yas/choose-value'(\"def\" \"edef\" \"gdef\" \"xdef\"))}\\\\${2:IDENTIFIER}{${3:${1:$(replace-regexp-in-string \"^\\\\\\\\(edef\\\\\\\\|xdef\\\\\\\\)$\" \"EXPANDABLE TEXT\" (replace-regexp-in-string \"^\\\\\\\\(def\\\\\\\\|gdef\\\\\\\\)$\" \"TEXT\" yas-text nil nil 1)nil nil 1)}}}%$0" "TeX variable assignment" nil
                        ("General")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/l_General/g_variable_assignment.yasnippet" nil nil)
                       ("inpf" "`(setq yas-triggers-in-field 'nil)`\\input ${1:$$(let ((tfiles (remove (file-name-nondirectory (buffer-file-name))(directory-files (expand-file-name (file-name-directory buffer-file-name)) nil \"^[^.]*\\\\.tex$\"))))(if (> (length tfiles) 0)(yas-choose-value (mapcar '(lambda (x) (file-name-base x)) tfiles))(yas-text)))}$0" "Input file in working dir" nil
                        ("General")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/l_General/f_input_file_in_working_directory.yasnippet" nil nil)
                       ("loop" "\\dorecurse{${1:NUMBER OF TIMES}}{${2:ACTION/CONTENT}}$0" "Do a looping action" nil
                        ("General")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/l_General/e_looping_action.yasnippet" nil nil)
                       ("yst" "`(replace-regexp-in-string \"[\\\\]+\" \"\\\\\\\\\"\n(replace-regexp-in-string \"[\\n]+\" \"\\n\\n\"\n(replace-regexp-in-string \"^\\\\\\\\par\\\\\\\\blank$\" \"\"\n(replace-regexp-in-string \"\\n\" \"\\\\\\\\par\\\\\\\\blank\\n\"\n(replace-regexp-in-string \"\\\\(^\\\\)\\\\(\\\\s-*\\\\)\" \"\"\n(replace-regexp-in-string \"~\" \"\\\\\\\\textasciitilde \"\n(replace-regexp-in-string \"#\" \"\\\\\\\\#\"\n(replace-regexp-in-string \"&\" \"\\\\\\\\&\"\n(replace-regexp-in-string \"|\" \"\\\\\\\\textbar \"\n(replace-regexp-in-string \"%\" \"\\\\\\\\percent \"\n(replace-regexp-in-string \"\\\\(%\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\percent\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(|\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textbar\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(~\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textasciitilde\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([\\$]\\\\)\\\\([[:nonascii:]A-Za-z0-9]+\\\\)\" \"\\\\\\\\textdollar \"\n(replace-regexp-in-string \"\\\\([^a-zA-Z#&|]\\\\)\\\\([\\\\]+\\\\)\\\\([^a-zA-Z#&|]\\\\)\" \"\\\\\\\\letterbackslash\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quotation{\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([»\\\"“„”]\\\\)\" \"}\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quote{\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹\\'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([›\\'‘‚’]\\\\)\" \"}\"\n(current-kill 0) nil nil 4) nil nil 2) nil nil 3) nil nil 1) nil nil 2) nil nil 1) nil nil 1) nil nil 1) nil nil 1 )))))))))))`$0" "Yank as spacious text" nil
                        ("General")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/l_General/d_yank_as_spacious_text.yasnippet" nil nil)
                       ("yct" "`(replace-regexp-in-string \"[\\\\]+\" \"\\\\\\\\\"\n(replace-regexp-in-string \"[\\n]+\" \"\\n\\n\"\n(replace-regexp-in-string \"^\\\\\\\\par$\" \"\"\n(replace-regexp-in-string \"\\n\" \"\\\\\\\\par\\n\"\n(replace-regexp-in-string \"\\\\(^\\\\)\\\\(\\\\s-*\\\\)\" \"\"\n(replace-regexp-in-string \"~\" \"\\\\\\\\textasciitilde \"\n(replace-regexp-in-string \"#\" \"\\\\\\\\#\"\n(replace-regexp-in-string \"&\" \"\\\\\\\\&\"\n(replace-regexp-in-string \"|\" \"\\\\\\\\textbar \"\n(replace-regexp-in-string \"%\" \"\\\\\\\\percent \"\n(replace-regexp-in-string \"\\\\(%\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\percent\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(|\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textbar\\\\\\\\\"\n(replace-regexp-in-string \"\\\\(~\\\\)\\\\([^[:nonascii:]a-zA-Z0-9]\\\\)\" \"\\\\\\\\textasciitilde\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([\\$]\\\\)\\\\([[:nonascii:]A-Za-z0-9]+\\\\)\" \"\\\\\\\\textdollar \"\n(replace-regexp-in-string \"\\\\([^a-zA-Z#&|]\\\\)\\\\([\\\\]+\\\\)\\\\([^a-zA-Z#&|]\\\\)\" \"\\\\\\\\letterbackslash\\\\\\\\\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quotation{\"\n(replace-regexp-in-string \"\\\\([«\\\"“„”]\\\\)\\\\([^«»\\\"“„”]+\\\\)\\\\([»\\\"“„”]\\\\)\" \"}\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([\\}]\\\\)\" \"\\\\\\\\quote{\"\n(replace-regexp-in-string \"\\\\([^[:nonascii:]a-zA-Z]+\\\\)\\\\([‹\\'‘‚’]\\\\)\\\\([^'‹›‘‚’]+\\\\)\\\\([›\\'‘‚’]\\\\)\" \"}\"\n(current-kill 0) nil nil 4) nil nil 2) nil nil 3) nil nil 1) nil nil 2) nil nil 1) nil nil 1) nil nil 1) nil nil 1 )))))))))))`$0" "Yank as compact text" nil
                        ("General")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/l_General/c_yank_as_compact_text.yasnippet" nil nil)
                       ("env" "\\start${1:IDENTIFIER}${2:$(let ((f2 (yas-field-value 2)))(cond ((>(string-width (format \"%s\" f2)) 0)(concat \"[\"))))}${2:OPION(S)=VALUE(S,)|KEYWORD|EMPTY}${2:$(let ((f2 (yas-field-value 2)))(cond ((>(string-width (format \"%s\" f2)) 0)(concat \"]\"))))}\n  ${3:TEXT/CONTENT}\n\\stop$1\n$0" "Use an environment" nil
                        ("General")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/l_General/b_use_and_environment.yasnippet" nil nil)
                       ("cmd" "\\\\${1:IDENTIFIER}{${2:TEXT/CONTENT}}$0" "Use a command" nil
                        ("General")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/yvindeidhammer/Documents/Dev/ctxsnippets05042022/context-mode/l_General/a_use_a_command.yasnippet" nil nil)))


;;; Do not edit! File generated at Sat Apr 16 20:14:20 2022
